// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: activity_task.proto

//*
// Definitions of the different activity tasks returned from [crate::Core::poll_task].

package coresdk_activity_task

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	commonpb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb/commonpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActivityCancelReason int32

const (
	/// The activity no longer exists according to server (may be already completed)
	NOT_FOUND ActivityCancelReason = 0
	/// Activity was explicitly cancelled
	CANCELLED ActivityCancelReason = 1
	/// Activity timed out
	TIMED_OUT ActivityCancelReason = 2
)

var ActivityCancelReason_name = map[int32]string{
	0: "NotFound",
	1: "Cancelled",
	2: "TimedOut",
}

var ActivityCancelReason_value = map[string]int32{
	"NotFound":  0,
	"Cancelled": 1,
	"TimedOut":  2,
}

func (ActivityCancelReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7cf3a42a79707262, []int{0}
}

type ActivityTask struct {
	/// A unique identifier for this task
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// Types that are valid to be assigned to Variant:
	//	*ActivityTask_Start
	//	*ActivityTask_Cancel
	Variant isActivityTask_Variant `protobuf_oneof:"variant"`
}

func (m *ActivityTask) Reset()      { *m = ActivityTask{} }
func (*ActivityTask) ProtoMessage() {}
func (*ActivityTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cf3a42a79707262, []int{0}
}
func (m *ActivityTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityTask.Merge(m, src)
}
func (m *ActivityTask) XXX_Size() int {
	return m.Size()
}
func (m *ActivityTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityTask.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityTask proto.InternalMessageInfo

type isActivityTask_Variant interface {
	isActivityTask_Variant()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActivityTask_Start struct {
	Start *Start `protobuf:"bytes,3,opt,name=start,proto3,oneof" json:"start,omitempty"`
}
type ActivityTask_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,4,opt,name=cancel,proto3,oneof" json:"cancel,omitempty"`
}

func (*ActivityTask_Start) isActivityTask_Variant()  {}
func (*ActivityTask_Cancel) isActivityTask_Variant() {}

func (m *ActivityTask) GetVariant() isActivityTask_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (m *ActivityTask) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *ActivityTask) GetStart() *Start {
	if x, ok := m.GetVariant().(*ActivityTask_Start); ok {
		return x.Start
	}
	return nil
}

func (m *ActivityTask) GetCancel() *Cancel {
	if x, ok := m.GetVariant().(*ActivityTask_Cancel); ok {
		return x.Cancel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivityTask) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivityTask_Start)(nil),
		(*ActivityTask_Cancel)(nil),
	}
}

// Begin executing an activity
type Start struct {
	// The namespace the workflow lives in
	WorkflowNamespace string `protobuf:"bytes,1,opt,name=workflow_namespace,json=workflowNamespace,proto3" json:"workflow_namespace,omitempty"`
	// The workflow's type name or function identifier
	WorkflowType string `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// The workflow execution which requested this activity
	WorkflowExecution *commonpb.WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// The activity's ID
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// The activity's type name or function identifier
	ActivityType string                       `protobuf:"bytes,5,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	HeaderFields map[string]*commonpb.Payload `protobuf:"bytes,6,rep,name=header_fields,json=headerFields,proto3" json:"header_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Arguments to the activity
	Input []*commonpb.Payload `protobuf:"bytes,7,rep,name=input,proto3" json:"input,omitempty"`
	// The last details that were recorded by a heartbeat when this task was generated
	HeartbeatDetails []*commonpb.Payload `protobuf:"bytes,8,rep,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	// When the task was *first* scheduled
	ScheduledTime *types.Timestamp `protobuf:"bytes,9,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// When this current attempt at the task was scheduled
	CurrentAttemptScheduledTime *types.Timestamp `protobuf:"bytes,10,opt,name=current_attempt_scheduled_time,json=currentAttemptScheduledTime,proto3" json:"current_attempt_scheduled_time,omitempty"`
	// When this attempt was started, which is to say when core received it by polling.
	StartedTime *types.Timestamp `protobuf:"bytes,11,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	Attempt     uint32           `protobuf:"varint,12,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// Timeout from the first schedule time to completion
	ScheduleToCloseTimeout *types.Duration `protobuf:"bytes,13,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Timeout from starting an attempt to reporting its result
	StartToCloseTimeout *types.Duration `protobuf:"bytes,14,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// If set a heartbeat must be reported within this interval
	HeartbeatTimeout *types.Duration `protobuf:"bytes,15,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// This is an actual retry policy the service uses. It can be different from the one provided
	// (or not) during activity scheduling as the service can override the provided one in case its
	// values are not specified or exceed configured system limits.
	RetryPolicy *commonpb.RetryPolicy `protobuf:"bytes,16,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Set to true if this is a local activity. Note that heartbeating does not apply to local
	// activities.
	IsLocal bool `protobuf:"varint,17,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
}

func (m *Start) Reset()      { *m = Start{} }
func (*Start) ProtoMessage() {}
func (*Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cf3a42a79707262, []int{1}
}
func (m *Start) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Start.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Start.Merge(m, src)
}
func (m *Start) XXX_Size() int {
	return m.Size()
}
func (m *Start) XXX_DiscardUnknown() {
	xxx_messageInfo_Start.DiscardUnknown(m)
}

var xxx_messageInfo_Start proto.InternalMessageInfo

func (m *Start) GetWorkflowNamespace() string {
	if m != nil {
		return m.WorkflowNamespace
	}
	return ""
}

func (m *Start) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *Start) GetWorkflowExecution() *commonpb.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *Start) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *Start) GetActivityType() string {
	if m != nil {
		return m.ActivityType
	}
	return ""
}

func (m *Start) GetHeaderFields() map[string]*commonpb.Payload {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *Start) GetInput() []*commonpb.Payload {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Start) GetHeartbeatDetails() []*commonpb.Payload {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *Start) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *Start) GetCurrentAttemptScheduledTime() *types.Timestamp {
	if m != nil {
		return m.CurrentAttemptScheduledTime
	}
	return nil
}

func (m *Start) GetStartedTime() *types.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *Start) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *Start) GetScheduleToCloseTimeout() *types.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *Start) GetStartToCloseTimeout() *types.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *Start) GetHeartbeatTimeout() *types.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *Start) GetRetryPolicy() *commonpb.RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *Start) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

/// Attempt to cancel a running activity
type Cancel struct {
	Reason ActivityCancelReason `protobuf:"varint,1,opt,name=reason,proto3,enum=coresdk.activity_task.ActivityCancelReason" json:"reason,omitempty"`
}

func (m *Cancel) Reset()      { *m = Cancel{} }
func (*Cancel) ProtoMessage() {}
func (*Cancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cf3a42a79707262, []int{2}
}
func (m *Cancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel.Merge(m, src)
}
func (m *Cancel) XXX_Size() int {
	return m.Size()
}
func (m *Cancel) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel proto.InternalMessageInfo

func (m *Cancel) GetReason() ActivityCancelReason {
	if m != nil {
		return m.Reason
	}
	return NOT_FOUND
}

func init() {
	proto.RegisterEnum("coresdk.activity_task.ActivityCancelReason", ActivityCancelReason_name, ActivityCancelReason_value)
	proto.RegisterType((*ActivityTask)(nil), "coresdk.activity_task.ActivityTask")
	proto.RegisterType((*Start)(nil), "coresdk.activity_task.Start")
	proto.RegisterMapType((map[string]*commonpb.Payload)(nil), "coresdk.activity_task.Start.HeaderFieldsEntry")
	proto.RegisterType((*Cancel)(nil), "coresdk.activity_task.Cancel")
}

func init() { proto.RegisterFile("activity_task.proto", fileDescriptor_7cf3a42a79707262) }

var fileDescriptor_7cf3a42a79707262 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x4e, 0xdb, 0x48,
	0x18, 0xb5, 0x61, 0xf3, 0x37, 0x49, 0xd8, 0x64, 0xd8, 0x65, 0x4d, 0x58, 0x4c, 0x96, 0xd5, 0x4a,
	0xd1, 0xae, 0x70, 0x24, 0x16, 0x69, 0x57, 0x95, 0x5a, 0x29, 0x24, 0x41, 0x20, 0x41, 0x40, 0xc6,
	0xa8, 0xbd, 0xb3, 0x06, 0x7b, 0x20, 0x56, 0x1c, 0x8f, 0x35, 0x1e, 0x43, 0x7d, 0xd7, 0x47, 0xe8,
	0x5b, 0xb4, 0x8f, 0xd2, 0x4b, 0x2e, 0xb9, 0xa9, 0x54, 0xc2, 0x4d, 0x2f, 0x79, 0x84, 0x6a, 0xc6,
	0x76, 0x02, 0xe1, 0x27, 0x57, 0xc9, 0x7c, 0x73, 0xce, 0xf9, 0xce, 0x37, 0x3e, 0x33, 0x60, 0x11,
	0x59, 0xcc, 0xb9, 0x70, 0x58, 0x64, 0x32, 0x14, 0x0c, 0x34, 0x9f, 0x12, 0x46, 0xe0, 0xaf, 0x16,
	0xa1, 0x38, 0xb0, 0x07, 0xda, 0x83, 0xcd, 0x9a, 0x7a, 0x4e, 0xc8, 0xb9, 0x8b, 0x9b, 0x02, 0x74,
	0x1a, 0x9e, 0x35, 0xed, 0x90, 0x22, 0xe6, 0x10, 0x2f, 0xa6, 0xd5, 0xd6, 0xa6, 0xf7, 0x99, 0x33,
	0xc4, 0x01, 0x43, 0x43, 0x3f, 0x01, 0xfc, 0xc5, 0xf0, 0xd0, 0x27, 0x14, 0xb9, 0xcd, 0xc0, 0x1e,
	0x34, 0x79, 0x93, 0xa6, 0x45, 0x86, 0x43, 0xe2, 0x25, 0x3f, 0x31, 0x6c, 0xfd, 0x93, 0x0c, 0x4a,
	0xad, 0xa4, 0xb3, 0x81, 0x82, 0x01, 0x5c, 0x05, 0x80, 0x1b, 0x30, 0x19, 0x19, 0x60, 0x4f, 0x91,
	0xeb, 0x72, 0xa3, 0xa4, 0x17, 0x78, 0xc5, 0xe0, 0x05, 0xb8, 0x05, 0x32, 0x01, 0x43, 0x94, 0x29,
	0xf3, 0x75, 0xb9, 0x51, 0xdc, 0xfc, 0x5d, 0x7b, 0xd2, 0xbe, 0x76, 0xcc, 0x31, 0xbb, 0x92, 0x1e,
	0x83, 0xe1, 0x7f, 0x20, 0x6b, 0x21, 0xcf, 0xc2, 0xae, 0xf2, 0x93, 0xa0, 0xad, 0x3e, 0x43, 0x6b,
	0x0b, 0xd0, 0xae, 0xa4, 0x27, 0xf0, 0xed, 0x02, 0xc8, 0x5d, 0x20, 0xea, 0x20, 0x8f, 0xad, 0x7f,
	0xcd, 0x83, 0x8c, 0x90, 0x85, 0x1b, 0x00, 0x5e, 0x12, 0x3a, 0x38, 0x73, 0xc9, 0xa5, 0xe9, 0xa1,
	0x21, 0x0e, 0x7c, 0x64, 0x61, 0x61, 0xb5, 0xa0, 0x57, 0xd3, 0x9d, 0x5e, 0xba, 0x01, 0xff, 0x04,
	0xe5, 0x31, 0x9c, 0x45, 0x3e, 0x56, 0xe6, 0x04, 0xb2, 0x94, 0x16, 0x8d, 0xc8, 0xc7, 0xf0, 0xe8,
	0x9e, 0x26, 0x7e, 0x8f, 0xad, 0x90, 0x9f, 0x75, 0x32, 0xe4, 0x1f, 0x63, 0xb7, 0xc9, 0xd1, 0xbd,
	0x4d, 0x90, 0xdd, 0x14, 0x38, 0x69, 0x3b, 0x2e, 0xc1, 0x35, 0x50, 0x1c, 0x0f, 0xe7, 0xd8, 0x62,
	0xf0, 0x82, 0x0e, 0xd2, 0xd2, 0x9e, 0xcd, 0x7d, 0x4d, 0xa6, 0xe7, 0xbe, 0x32, 0xb1, 0xaf, 0xb4,
	0x28, 0x7c, 0x1d, 0x83, 0x72, 0x1f, 0x23, 0x1b, 0x53, 0xf3, 0xcc, 0xc1, 0xae, 0x1d, 0x28, 0xd9,
	0xfa, 0x7c, 0xa3, 0xb8, 0xa9, 0xbd, 0x74, 0xee, 0xda, 0xae, 0x60, 0xec, 0x08, 0x42, 0xd7, 0x63,
	0x34, 0xd2, 0x4b, 0xfd, 0x7b, 0x25, 0xb8, 0x01, 0x32, 0x8e, 0xe7, 0x87, 0x4c, 0xc9, 0x09, 0xb1,
	0xdf, 0xa6, 0xe7, 0x3b, 0x42, 0x91, 0x4b, 0x90, 0xad, 0xc7, 0x28, 0xd8, 0x01, 0xd5, 0x3e, 0x46,
	0x94, 0x9d, 0x62, 0xc4, 0x4c, 0x1b, 0x33, 0xe4, 0xb8, 0x81, 0x92, 0x7f, 0x99, 0x5a, 0x19, 0x33,
	0x3a, 0x31, 0x01, 0xb6, 0xc0, 0x42, 0x60, 0xf5, 0xb1, 0x1d, 0xba, 0xd8, 0x36, 0x79, 0x5a, 0x95,
	0x82, 0x38, 0xdd, 0x9a, 0x16, 0x47, 0x59, 0x4b, 0xa3, 0xac, 0x19, 0x69, 0x94, 0xf5, 0xf2, 0x98,
	0xc1, 0x6b, 0xd0, 0x04, 0xaa, 0x15, 0x52, 0x8a, 0x3d, 0x66, 0x22, 0xc6, 0xf3, 0xcd, 0xcc, 0x29,
	0x49, 0x30, 0x53, 0x72, 0x25, 0x51, 0x68, 0xc5, 0x02, 0xc7, 0x0f, 0x1a, 0xbc, 0x06, 0x25, 0x11,
	0xd8, 0x54, 0xae, 0x38, 0x53, 0xae, 0x98, 0xe0, 0x05, 0x5d, 0x01, 0xb9, 0xc4, 0x97, 0x52, 0xaa,
	0xcb, 0x8d, 0xb2, 0x9e, 0x2e, 0xa1, 0x01, 0x96, 0x53, 0xa7, 0x26, 0x23, 0xa6, 0xe5, 0x92, 0x00,
	0x8b, 0x16, 0x24, 0x64, 0x4a, 0x59, 0x74, 0x59, 0x7e, 0xd4, 0xa5, 0x93, 0x5c, 0x79, 0x7d, 0x29,
	0xe5, 0x1a, 0xa4, 0xcd, 0x99, 0x46, 0x4c, 0x84, 0x3d, 0xb0, 0x24, 0xda, 0x3f, 0x96, 0x5c, 0x98,
	0x25, 0xb9, 0x28, 0x88, 0x53, 0x7a, 0x3b, 0xf7, 0x3f, 0x74, 0x2a, 0xf5, 0xf3, 0x2c, 0xa9, 0xc9,
	0xa7, 0x4e, 0x75, 0xde, 0x80, 0x12, 0xc5, 0x8c, 0x46, 0xa6, 0x4f, 0x5c, 0xc7, 0x8a, 0x94, 0x8a,
	0x90, 0x58, 0x99, 0xce, 0x8a, 0xce, 0x31, 0x47, 0x02, 0xa2, 0x17, 0xe9, 0x64, 0x01, 0x97, 0x41,
	0xde, 0x09, 0x4c, 0x97, 0x58, 0xc8, 0x55, 0xaa, 0x75, 0xb9, 0x91, 0xd7, 0x73, 0x4e, 0xb0, 0xcf,
	0x97, 0xb5, 0x77, 0xa0, 0xfa, 0x28, 0xdd, 0xb0, 0x02, 0xe6, 0x07, 0x38, 0x4a, 0x5e, 0x00, 0xfe,
	0x97, 0x27, 0xfc, 0x02, 0xb9, 0x61, 0x7c, 0xd7, 0x5f, 0x4a, 0xb8, 0x40, 0xbd, 0x9a, 0xfb, 0x5f,
	0x5e, 0x3f, 0x00, 0xd9, 0xf8, 0xf9, 0x81, 0x6d, 0x90, 0xa5, 0x18, 0x05, 0x24, 0x7e, 0xfe, 0x16,
	0x36, 0xff, 0x79, 0xe6, 0xb2, 0xa5, 0xef, 0x66, 0x4c, 0xd3, 0x05, 0x45, 0x4f, 0xa8, 0x7f, 0xb7,
	0xc1, 0x2f, 0x4f, 0xed, 0xc3, 0x32, 0x28, 0xf4, 0x0e, 0x0d, 0x73, 0xe7, 0xf0, 0xa4, 0xd7, 0xa9,
	0x48, 0x7c, 0xd9, 0x6e, 0xf5, 0xda, 0xdd, 0xfd, 0xfd, 0x6e, 0xa7, 0x22, 0xf3, 0xa5, 0xb1, 0x77,
	0xd0, 0xed, 0x98, 0x87, 0x27, 0x46, 0x65, 0x6e, 0x7b, 0xeb, 0xea, 0x46, 0x95, 0xae, 0x6f, 0x54,
	0xe9, 0xee, 0x46, 0x95, 0x3f, 0x8c, 0x54, 0xf9, 0xf3, 0x48, 0x95, 0xbf, 0x8c, 0x54, 0xf9, 0x6a,
	0xa4, 0xca, 0xdf, 0x46, 0xaa, 0xfc, 0x7d, 0xa4, 0x4a, 0x77, 0x23, 0x55, 0xfe, 0x78, 0xab, 0x4a,
	0x57, 0xb7, 0xaa, 0x74, 0x7d, 0xab, 0x4a, 0xa7, 0x59, 0xf1, 0x8d, 0xfe, 0xfd, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xe7, 0x5c, 0x5b, 0x23, 0x70, 0x06, 0x00, 0x00,
}

func (x ActivityCancelReason) String() string {
	s, ok := ActivityCancelReason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ActivityTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTask)
	if !ok {
		that2, ok := that.(ActivityTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if that1.Variant == nil {
		if this.Variant != nil {
			return false
		}
	} else if this.Variant == nil {
		return false
	} else if !this.Variant.Equal(that1.Variant) {
		return false
	}
	return true
}
func (this *ActivityTask_Start) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTask_Start)
	if !ok {
		that2, ok := that.(ActivityTask_Start)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	return true
}
func (this *ActivityTask_Cancel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityTask_Cancel)
	if !ok {
		that2, ok := that.(ActivityTask_Cancel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancel.Equal(that1.Cancel) {
		return false
	}
	return true
}
func (this *Start) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Start)
	if !ok {
		that2, ok := that.(Start)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkflowNamespace != that1.WorkflowNamespace {
		return false
	}
	if this.WorkflowType != that1.WorkflowType {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.ActivityType != that1.ActivityType {
		return false
	}
	if len(this.HeaderFields) != len(that1.HeaderFields) {
		return false
	}
	for i := range this.HeaderFields {
		if !this.HeaderFields[i].Equal(that1.HeaderFields[i]) {
			return false
		}
	}
	if len(this.Input) != len(that1.Input) {
		return false
	}
	for i := range this.Input {
		if !this.Input[i].Equal(that1.Input[i]) {
			return false
		}
	}
	if len(this.HeartbeatDetails) != len(that1.HeartbeatDetails) {
		return false
	}
	for i := range this.HeartbeatDetails {
		if !this.HeartbeatDetails[i].Equal(that1.HeartbeatDetails[i]) {
			return false
		}
	}
	if !this.ScheduledTime.Equal(that1.ScheduledTime) {
		return false
	}
	if !this.CurrentAttemptScheduledTime.Equal(that1.CurrentAttemptScheduledTime) {
		return false
	}
	if !this.StartedTime.Equal(that1.StartedTime) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if !this.ScheduleToCloseTimeout.Equal(that1.ScheduleToCloseTimeout) {
		return false
	}
	if !this.StartToCloseTimeout.Equal(that1.StartToCloseTimeout) {
		return false
	}
	if !this.HeartbeatTimeout.Equal(that1.HeartbeatTimeout) {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IsLocal != that1.IsLocal {
		return false
	}
	return true
}
func (this *Cancel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cancel)
	if !ok {
		that2, ok := that.(Cancel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ActivityTask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_activity_task.ActivityTask{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.Variant != nil {
		s = append(s, "Variant: "+fmt.Sprintf("%#v", this.Variant)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityTask_Start) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_task.ActivityTask_Start{` +
		`Start:` + fmt.Sprintf("%#v", this.Start) + `}`}, ", ")
	return s
}
func (this *ActivityTask_Cancel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_task.ActivityTask_Cancel{` +
		`Cancel:` + fmt.Sprintf("%#v", this.Cancel) + `}`}, ", ")
	return s
}
func (this *Start) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&coresdk_activity_task.Start{")
	s = append(s, "WorkflowNamespace: "+fmt.Sprintf("%#v", this.WorkflowNamespace)+",\n")
	s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	keysForHeaderFields := make([]string, 0, len(this.HeaderFields))
	for k, _ := range this.HeaderFields {
		keysForHeaderFields = append(keysForHeaderFields, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaderFields)
	mapStringForHeaderFields := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaderFields {
		mapStringForHeaderFields += fmt.Sprintf("%#v: %#v,", k, this.HeaderFields[k])
	}
	mapStringForHeaderFields += "}"
	if this.HeaderFields != nil {
		s = append(s, "HeaderFields: "+mapStringForHeaderFields+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.HeartbeatDetails != nil {
		s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	}
	if this.ScheduledTime != nil {
		s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	}
	if this.CurrentAttemptScheduledTime != nil {
		s = append(s, "CurrentAttemptScheduledTime: "+fmt.Sprintf("%#v", this.CurrentAttemptScheduledTime)+",\n")
	}
	if this.StartedTime != nil {
		s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	}
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	if this.ScheduleToCloseTimeout != nil {
		s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	}
	if this.StartToCloseTimeout != nil {
		s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	}
	if this.HeartbeatTimeout != nil {
		s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IsLocal: "+fmt.Sprintf("%#v", this.IsLocal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cancel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_activity_task.Cancel{")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActivityTask(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActivityTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Variant != nil {
		{
			size := m.Variant.Size()
			i -= size
			if _, err := m.Variant.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintActivityTask(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityTask_Start) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTask_Start) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ActivityTask_Cancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityTask_Cancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancel != nil {
		{
			size, err := m.Cancel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Start) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Start) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Start) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLocal {
		i--
		if m.IsLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.HeartbeatTimeout != nil {
		{
			size, err := m.HeartbeatTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.StartToCloseTimeout != nil {
		{
			size, err := m.StartToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ScheduleToCloseTimeout != nil {
		{
			size, err := m.ScheduleToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Attempt != 0 {
		i = encodeVarintActivityTask(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x60
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CurrentAttemptScheduledTime != nil {
		{
			size, err := m.CurrentAttemptScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HeartbeatDetails) > 0 {
		for iNdEx := len(m.HeartbeatDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeartbeatDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivityTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Input) > 0 {
		for iNdEx := len(m.Input) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Input[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivityTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.HeaderFields) > 0 {
		for k := range m.HeaderFields {
			v := m.HeaderFields[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintActivityTask(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActivityTask(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActivityTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ActivityType) > 0 {
		i -= len(m.ActivityType)
		copy(dAtA[i:], m.ActivityType)
		i = encodeVarintActivityTask(dAtA, i, uint64(len(m.ActivityType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintActivityTask(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowType) > 0 {
		i -= len(m.WorkflowType)
		copy(dAtA[i:], m.WorkflowType)
		i = encodeVarintActivityTask(dAtA, i, uint64(len(m.WorkflowType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkflowNamespace) > 0 {
		i -= len(m.WorkflowNamespace)
		copy(dAtA[i:], m.WorkflowNamespace)
		i = encodeVarintActivityTask(dAtA, i, uint64(len(m.WorkflowNamespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintActivityTask(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActivityTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.Variant != nil {
		n += m.Variant.Size()
	}
	return n
}

func (m *ActivityTask_Start) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	return n
}
func (m *ActivityTask_Cancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancel != nil {
		l = m.Cancel.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	return n
}
func (m *Start) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkflowNamespace)
	if l > 0 {
		n += 1 + l + sovActivityTask(uint64(l))
	}
	l = len(m.WorkflowType)
	if l > 0 {
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovActivityTask(uint64(l))
	}
	l = len(m.ActivityType)
	if l > 0 {
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if len(m.HeaderFields) > 0 {
		for k, v := range m.HeaderFields {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovActivityTask(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovActivityTask(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovActivityTask(uint64(mapEntrySize))
		}
	}
	if len(m.Input) > 0 {
		for _, e := range m.Input {
			l = e.Size()
			n += 1 + l + sovActivityTask(uint64(l))
		}
	}
	if len(m.HeartbeatDetails) > 0 {
		for _, e := range m.HeartbeatDetails {
			l = e.Size()
			n += 1 + l + sovActivityTask(uint64(l))
		}
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.CurrentAttemptScheduledTime != nil {
		l = m.CurrentAttemptScheduledTime.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovActivityTask(uint64(m.Attempt))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = m.ScheduleToCloseTimeout.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = m.StartToCloseTimeout.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = m.HeartbeatTimeout.Size()
		n += 1 + l + sovActivityTask(uint64(l))
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovActivityTask(uint64(l))
	}
	if m.IsLocal {
		n += 3
	}
	return n
}

func (m *Cancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovActivityTask(uint64(m.Reason))
	}
	return n
}

func sovActivityTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityTask(x uint64) (n int) {
	return sovActivityTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActivityTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTask{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`Variant:` + fmt.Sprintf("%v", this.Variant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTask_Start) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTask_Start{`,
		`Start:` + strings.Replace(fmt.Sprintf("%v", this.Start), "Start", "Start", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityTask_Cancel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityTask_Cancel{`,
		`Cancel:` + strings.Replace(fmt.Sprintf("%v", this.Cancel), "Cancel", "Cancel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Start) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInput := "[]*Payload{"
	for _, f := range this.Input {
		repeatedStringForInput += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForInput += "}"
	repeatedStringForHeartbeatDetails := "[]*Payload{"
	for _, f := range this.HeartbeatDetails {
		repeatedStringForHeartbeatDetails += strings.Replace(fmt.Sprintf("%v", f), "Payload", "commonpb.Payload", 1) + ","
	}
	repeatedStringForHeartbeatDetails += "}"
	keysForHeaderFields := make([]string, 0, len(this.HeaderFields))
	for k, _ := range this.HeaderFields {
		keysForHeaderFields = append(keysForHeaderFields, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaderFields)
	mapStringForHeaderFields := "map[string]*commonpb.Payload{"
	for _, k := range keysForHeaderFields {
		mapStringForHeaderFields += fmt.Sprintf("%v: %v,", k, this.HeaderFields[k])
	}
	mapStringForHeaderFields += "}"
	s := strings.Join([]string{`&Start{`,
		`WorkflowNamespace:` + fmt.Sprintf("%v", this.WorkflowNamespace) + `,`,
		`WorkflowType:` + fmt.Sprintf("%v", this.WorkflowType) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "commonpb.WorkflowExecution", 1) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + fmt.Sprintf("%v", this.ActivityType) + `,`,
		`HeaderFields:` + mapStringForHeaderFields + `,`,
		`Input:` + repeatedStringForInput + `,`,
		`HeartbeatDetails:` + repeatedStringForHeartbeatDetails + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CurrentAttemptScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.CurrentAttemptScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "types.Duration", 1) + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicy", "commonpb.RetryPolicy", 1) + `,`,
		`IsLocal:` + fmt.Sprintf("%v", this.IsLocal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cancel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cancel{`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActivityTask(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActivityTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Start{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &ActivityTask_Start{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Variant = &ActivityTask_Cancel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Start) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Start: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Start: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &commonpb.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderFields == nil {
				m.HeaderFields = make(map[string]*commonpb.Payload)
			}
			var mapkey string
			var mapvalue *commonpb.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActivityTask
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActivityTask
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthActivityTask
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthActivityTask
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &commonpb.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthActivityTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HeaderFields[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, &commonpb.Payload{})
			if err := m.Input[len(m.Input)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatDetails = append(m.HeartbeatDetails, &commonpb.Payload{})
			if err := m.HeartbeatDetails[len(m.HeartbeatDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAttemptScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentAttemptScheduledTime == nil {
				m.CurrentAttemptScheduledTime = &types.Timestamp{}
			}
			if err := m.CurrentAttemptScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &types.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = &types.Duration{}
			}
			if err := m.ScheduleToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = &types.Duration{}
			}
			if err := m.StartToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = &types.Duration{}
			}
			if err := m.HeartbeatTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &commonpb.RetryPolicy{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivityTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= ActivityCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityTask = fmt.Errorf("proto: unexpected end of group")
)
