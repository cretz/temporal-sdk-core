// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: activity_result.proto

package coresdk_activity_result

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	commonpb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb/commonpb"
	v1 "go.temporal.io/api/failure/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//*
// Used to report activity completions to core
type ActivityExecutionResult struct {
	// Types that are valid to be assigned to Status:
	//	*ActivityExecutionResult_Completed
	//	*ActivityExecutionResult_Failed
	//	*ActivityExecutionResult_Cancelled
	//	*ActivityExecutionResult_WillCompleteAsync
	Status isActivityExecutionResult_Status `protobuf_oneof:"status"`
}

func (m *ActivityExecutionResult) Reset()      { *m = ActivityExecutionResult{} }
func (*ActivityExecutionResult) ProtoMessage() {}
func (*ActivityExecutionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{0}
}
func (m *ActivityExecutionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityExecutionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityExecutionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityExecutionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityExecutionResult.Merge(m, src)
}
func (m *ActivityExecutionResult) XXX_Size() int {
	return m.Size()
}
func (m *ActivityExecutionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityExecutionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityExecutionResult proto.InternalMessageInfo

type isActivityExecutionResult_Status interface {
	isActivityExecutionResult_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActivityExecutionResult_Completed struct {
	Completed *Success `protobuf:"bytes,1,opt,name=completed,proto3,oneof" json:"completed,omitempty"`
}
type ActivityExecutionResult_Failed struct {
	Failed *Failure `protobuf:"bytes,2,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type ActivityExecutionResult_Cancelled struct {
	Cancelled *Cancellation `protobuf:"bytes,3,opt,name=cancelled,proto3,oneof" json:"cancelled,omitempty"`
}
type ActivityExecutionResult_WillCompleteAsync struct {
	WillCompleteAsync *WillCompleteAsync `protobuf:"bytes,4,opt,name=will_complete_async,json=willCompleteAsync,proto3,oneof" json:"will_complete_async,omitempty"`
}

func (*ActivityExecutionResult_Completed) isActivityExecutionResult_Status()         {}
func (*ActivityExecutionResult_Failed) isActivityExecutionResult_Status()            {}
func (*ActivityExecutionResult_Cancelled) isActivityExecutionResult_Status()         {}
func (*ActivityExecutionResult_WillCompleteAsync) isActivityExecutionResult_Status() {}

func (m *ActivityExecutionResult) GetStatus() isActivityExecutionResult_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ActivityExecutionResult) GetCompleted() *Success {
	if x, ok := m.GetStatus().(*ActivityExecutionResult_Completed); ok {
		return x.Completed
	}
	return nil
}

func (m *ActivityExecutionResult) GetFailed() *Failure {
	if x, ok := m.GetStatus().(*ActivityExecutionResult_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *ActivityExecutionResult) GetCancelled() *Cancellation {
	if x, ok := m.GetStatus().(*ActivityExecutionResult_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

func (m *ActivityExecutionResult) GetWillCompleteAsync() *WillCompleteAsync {
	if x, ok := m.GetStatus().(*ActivityExecutionResult_WillCompleteAsync); ok {
		return x.WillCompleteAsync
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivityExecutionResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivityExecutionResult_Completed)(nil),
		(*ActivityExecutionResult_Failed)(nil),
		(*ActivityExecutionResult_Cancelled)(nil),
		(*ActivityExecutionResult_WillCompleteAsync)(nil),
	}
}

// Used to report activity resolutions to lang. IE: This is what the activities are resolved with
// in the workflow.
type ActivityResolution struct {
	// Types that are valid to be assigned to Status:
	//	*ActivityResolution_Completed
	//	*ActivityResolution_Failed
	//	*ActivityResolution_Cancelled
	//	*ActivityResolution_Backoff
	Status isActivityResolution_Status `protobuf_oneof:"status"`
}

func (m *ActivityResolution) Reset()      { *m = ActivityResolution{} }
func (*ActivityResolution) ProtoMessage() {}
func (*ActivityResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{1}
}
func (m *ActivityResolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityResolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityResolution.Merge(m, src)
}
func (m *ActivityResolution) XXX_Size() int {
	return m.Size()
}
func (m *ActivityResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityResolution.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityResolution proto.InternalMessageInfo

type isActivityResolution_Status interface {
	isActivityResolution_Status()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActivityResolution_Completed struct {
	Completed *Success `protobuf:"bytes,1,opt,name=completed,proto3,oneof" json:"completed,omitempty"`
}
type ActivityResolution_Failed struct {
	Failed *Failure `protobuf:"bytes,2,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type ActivityResolution_Cancelled struct {
	Cancelled *Cancellation `protobuf:"bytes,3,opt,name=cancelled,proto3,oneof" json:"cancelled,omitempty"`
}
type ActivityResolution_Backoff struct {
	Backoff *DoBackoff `protobuf:"bytes,4,opt,name=backoff,proto3,oneof" json:"backoff,omitempty"`
}

func (*ActivityResolution_Completed) isActivityResolution_Status() {}
func (*ActivityResolution_Failed) isActivityResolution_Status()    {}
func (*ActivityResolution_Cancelled) isActivityResolution_Status() {}
func (*ActivityResolution_Backoff) isActivityResolution_Status()   {}

func (m *ActivityResolution) GetStatus() isActivityResolution_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ActivityResolution) GetCompleted() *Success {
	if x, ok := m.GetStatus().(*ActivityResolution_Completed); ok {
		return x.Completed
	}
	return nil
}

func (m *ActivityResolution) GetFailed() *Failure {
	if x, ok := m.GetStatus().(*ActivityResolution_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *ActivityResolution) GetCancelled() *Cancellation {
	if x, ok := m.GetStatus().(*ActivityResolution_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

func (m *ActivityResolution) GetBackoff() *DoBackoff {
	if x, ok := m.GetStatus().(*ActivityResolution_Backoff); ok {
		return x.Backoff
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivityResolution) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivityResolution_Completed)(nil),
		(*ActivityResolution_Failed)(nil),
		(*ActivityResolution_Cancelled)(nil),
		(*ActivityResolution_Backoff)(nil),
	}
}

//* Used to report successful completion either when executing or resolving
type Success struct {
	Result *commonpb.Payload `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Success) Reset()      { *m = Success{} }
func (*Success) ProtoMessage() {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{2}
}
func (m *Success) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Success.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return m.Size()
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

func (m *Success) GetResult() *commonpb.Payload {
	if m != nil {
		return m.Result
	}
	return nil
}

//* Used to report activity failure either when executing or resolving
type Failure struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Failure) Reset()      { *m = Failure{} }
func (*Failure) ProtoMessage() {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{3}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

//*
// Used to report cancellation from both Core and Lang.
// When Lang reports a cancelled activity, it must put a CancelledFailure in the failure field.
// When Core reports a cancelled activity, it must put an ActivityFailure with CancelledFailure
// as the cause in the failure field.
type Cancellation struct {
	Failure *v1.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *Cancellation) Reset()      { *m = Cancellation{} }
func (*Cancellation) ProtoMessage() {}
func (*Cancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{4}
}
func (m *Cancellation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancellation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancellation.Merge(m, src)
}
func (m *Cancellation) XXX_Size() int {
	return m.Size()
}
func (m *Cancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancellation.DiscardUnknown(m)
}

var xxx_messageInfo_Cancellation proto.InternalMessageInfo

func (m *Cancellation) GetFailure() *v1.Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

//*
// Used in ActivityExecutionResult to notify Core that this Activity will complete asynchronously.
// Core will forget about this Activity and free up resources used to track this Activity.
type WillCompleteAsync struct {
}

func (m *WillCompleteAsync) Reset()      { *m = WillCompleteAsync{} }
func (*WillCompleteAsync) ProtoMessage() {}
func (*WillCompleteAsync) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{5}
}
func (m *WillCompleteAsync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WillCompleteAsync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WillCompleteAsync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WillCompleteAsync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WillCompleteAsync.Merge(m, src)
}
func (m *WillCompleteAsync) XXX_Size() int {
	return m.Size()
}
func (m *WillCompleteAsync) XXX_DiscardUnknown() {
	xxx_messageInfo_WillCompleteAsync.DiscardUnknown(m)
}

var xxx_messageInfo_WillCompleteAsync proto.InternalMessageInfo

//*
// Issued when a local activity needs to retry but also wants to back off more than would be
// reasonable to WFT heartbeat for. Lang is expected to schedule a timer for the duration
// and then start a local activity of the same type & same inputs with the provided attempt number
// after the timer has elapsed.
//
// This exists because Core does not have a concept of starting commands by itself, they originate
// from lang. So expecting lang to start the timer / next pass of the activity fits more smoothly.
type DoBackoff struct {
	// The attempt number that lang should provide when scheduling the retry. If the LA failed
	// on attempt 4 and we told lang to back off with a timer, this number will be 5.
	Attempt         uint32          `protobuf:"varint,1,opt,name=attempt,proto3" json:"attempt,omitempty"`
	BackoffDuration *types.Duration `protobuf:"bytes,2,opt,name=backoff_duration,json=backoffDuration,proto3" json:"backoff_duration,omitempty"`
	// The time the first attempt of this local activity was scheduled. Must be passed with attempt
	// to the retry LA.
	OriginalScheduleTime *types.Timestamp `protobuf:"bytes,3,opt,name=original_schedule_time,json=originalScheduleTime,proto3" json:"original_schedule_time,omitempty"`
}

func (m *DoBackoff) Reset()      { *m = DoBackoff{} }
func (*DoBackoff) ProtoMessage() {}
func (*DoBackoff) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bdd21ad78dc5785, []int{6}
}
func (m *DoBackoff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoBackoff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoBackoff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoBackoff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoBackoff.Merge(m, src)
}
func (m *DoBackoff) XXX_Size() int {
	return m.Size()
}
func (m *DoBackoff) XXX_DiscardUnknown() {
	xxx_messageInfo_DoBackoff.DiscardUnknown(m)
}

var xxx_messageInfo_DoBackoff proto.InternalMessageInfo

func (m *DoBackoff) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *DoBackoff) GetBackoffDuration() *types.Duration {
	if m != nil {
		return m.BackoffDuration
	}
	return nil
}

func (m *DoBackoff) GetOriginalScheduleTime() *types.Timestamp {
	if m != nil {
		return m.OriginalScheduleTime
	}
	return nil
}

func init() {
	proto.RegisterType((*ActivityExecutionResult)(nil), "coresdk.activity_result.ActivityExecutionResult")
	proto.RegisterType((*ActivityResolution)(nil), "coresdk.activity_result.ActivityResolution")
	proto.RegisterType((*Success)(nil), "coresdk.activity_result.Success")
	proto.RegisterType((*Failure)(nil), "coresdk.activity_result.Failure")
	proto.RegisterType((*Cancellation)(nil), "coresdk.activity_result.Cancellation")
	proto.RegisterType((*WillCompleteAsync)(nil), "coresdk.activity_result.WillCompleteAsync")
	proto.RegisterType((*DoBackoff)(nil), "coresdk.activity_result.DoBackoff")
}

func init() { proto.RegisterFile("activity_result.proto", fileDescriptor_4bdd21ad78dc5785) }

var fileDescriptor_4bdd21ad78dc5785 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0x31, 0x8f, 0xd3, 0x3e,
	0x18, 0xc6, 0x93, 0xfb, 0xff, 0xd5, 0x52, 0x03, 0x82, 0xf3, 0x01, 0x2d, 0x1d, 0xcc, 0x29, 0xd2,
	0x49, 0x88, 0x21, 0xd1, 0x01, 0x53, 0x07, 0xc4, 0xf5, 0x5a, 0x54, 0x31, 0x9d, 0x7c, 0x48, 0x2c,
	0x48, 0x91, 0xeb, 0xb8, 0xc5, 0xaa, 0x53, 0x47, 0xb1, 0xd3, 0xa3, 0x1b, 0x1f, 0x81, 0xef, 0xc0,
	0xc2, 0x97, 0x60, 0x45, 0x8c, 0x1d, 0x6f, 0xa4, 0xe9, 0xc2, 0x78, 0x1f, 0x01, 0x25, 0xb1, 0xcb,
	0xa9, 0x55, 0xc5, 0xc0, 0xc6, 0x54, 0x35, 0xef, 0xf3, 0x7b, 0xf4, 0xbe, 0x8f, 0x5f, 0xbd, 0xe0,
	0x3e, 0xa1, 0x9a, 0xcf, 0xb8, 0x9e, 0x87, 0x29, 0x53, 0x99, 0xd0, 0x7e, 0x92, 0x4a, 0x2d, 0x61,
	0x93, 0xca, 0x94, 0xa9, 0x68, 0xe2, 0x6f, 0x94, 0xdb, 0x68, 0x2c, 0xe5, 0x58, 0xb0, 0xa0, 0x94,
	0x0d, 0xb3, 0x51, 0x10, 0x65, 0x29, 0xd1, 0x5c, 0x4e, 0x2b, 0xb0, 0xfd, 0x68, 0xb3, 0xae, 0x79,
	0xcc, 0x94, 0x26, 0x71, 0x62, 0x04, 0x47, 0x9a, 0xc5, 0x89, 0x4c, 0x89, 0x08, 0x48, 0xc2, 0x83,
	0x11, 0xe1, 0x22, 0x4b, 0x59, 0x30, 0x3b, 0x0e, 0x62, 0xa6, 0x14, 0x19, 0xb3, 0x2d, 0x99, 0x8a,
	0x26, 0x41, 0xd1, 0x4d, 0x40, 0x65, 0x1c, 0xcb, 0xa9, 0xf9, 0xa9, 0x64, 0xde, 0xb7, 0x3d, 0xd0,
	0x3c, 0x31, 0x2d, 0xf6, 0x3f, 0x30, 0x9a, 0x15, 0xad, 0xe0, 0xb2, 0x55, 0xf8, 0x12, 0x34, 0xa8,
	0x8c, 0x13, 0xc1, 0x34, 0x8b, 0x5a, 0xee, 0xa1, 0xfb, 0xf8, 0xe6, 0xd3, 0x43, 0x7f, 0xc7, 0x5c,
	0xfe, 0x79, 0x46, 0x29, 0x53, 0x6a, 0xe0, 0xe0, 0xdf, 0x10, 0xec, 0x80, 0x5a, 0xd1, 0x20, 0x8b,
	0x5a, 0x7b, 0x7f, 0xc0, 0x5f, 0x55, 0x73, 0x0c, 0x1c, 0x6c, 0x08, 0xd8, 0x07, 0x0d, 0x4a, 0xa6,
	0x94, 0x89, 0x02, 0xff, 0xaf, 0xc4, 0x8f, 0x76, 0xe2, 0xa7, 0x95, 0xb2, 0x0c, 0xb2, 0x6c, 0xc1,
	0x92, 0xf0, 0x1d, 0x38, 0xb8, 0xe0, 0x42, 0x84, 0xb6, 0xa9, 0x90, 0xa8, 0xf9, 0x94, 0xb6, 0xfe,
	0x2f, 0x0d, 0x9f, 0xec, 0x34, 0x7c, 0xcb, 0x85, 0x38, 0x35, 0xc8, 0x49, 0x41, 0x0c, 0x1c, 0xbc,
	0x7f, 0xb1, 0xf9, 0xb1, 0x7b, 0x03, 0xd4, 0x94, 0x26, 0x3a, 0x53, 0xde, 0xe7, 0x3d, 0x00, 0x6d,
	0x90, 0x98, 0x29, 0x29, 0xca, 0x24, 0xff, 0x8d, 0x0c, 0x5f, 0x80, 0xfa, 0x90, 0xd0, 0x89, 0x1c,
	0x8d, 0x4c, 0x6e, 0xde, 0x4e, 0x93, 0x9e, 0xec, 0x56, 0xca, 0x81, 0x83, 0x2d, 0x74, 0x2d, 0xa5,
	0x0e, 0xa8, 0x9b, 0x21, 0x61, 0x00, 0x6a, 0x15, 0x63, 0x62, 0x69, 0xae, 0x3d, 0xcd, 0x82, 0x9e,
	0x91, 0xb9, 0x90, 0x24, 0xc2, 0x46, 0xe6, 0xf5, 0x41, 0xdd, 0x4c, 0x08, 0x3b, 0xa0, 0x6e, 0x16,
	0x7f, 0x9d, 0xa9, 0x5d, 0x77, 0x9f, 0x24, 0xdc, 0x37, 0x45, 0x7f, 0x76, 0x6c, 0x43, 0xc1, 0x16,
	0xf0, 0x5e, 0x83, 0x5b, 0xd7, 0x27, 0xfd, 0x2b, 0xaf, 0x03, 0xb0, 0xbf, 0xb5, 0x28, 0xde, 0x57,
	0x17, 0x34, 0xd6, 0x31, 0xc0, 0x16, 0xa8, 0x13, 0x5d, 0x18, 0x56, 0x73, 0xde, 0xc6, 0xf6, 0x2f,
	0xec, 0x81, 0xbb, 0x26, 0xa0, 0xd0, 0xde, 0x00, 0xf3, 0xc4, 0x0f, 0xfd, 0xea, 0x08, 0xf8, 0xf6,
	0x08, 0xf8, 0x3d, 0x23, 0xc0, 0x77, 0x0c, 0x62, 0x3f, 0xc0, 0x33, 0xf0, 0x40, 0xa6, 0x7c, 0xcc,
	0xa7, 0x44, 0x84, 0x8a, 0xbe, 0x67, 0x51, 0x26, 0x58, 0x58, 0xdc, 0x0c, 0xf3, 0xde, 0xed, 0x2d,
	0xaf, 0x37, 0xf6, 0xa0, 0xe0, 0x7b, 0x96, 0x3c, 0x37, 0x60, 0x51, 0xea, 0x3e, 0x5f, 0x2c, 0x91,
	0x73, 0xb9, 0x44, 0xce, 0xd5, 0x12, 0xb9, 0x1f, 0x73, 0xe4, 0x7e, 0xc9, 0x91, 0xfb, 0x3d, 0x47,
	0xee, 0x22, 0x47, 0xee, 0x8f, 0x1c, 0xb9, 0x3f, 0x73, 0xe4, 0x5c, 0xe5, 0xc8, 0xfd, 0xb4, 0x42,
	0xce, 0x62, 0x85, 0x9c, 0xcb, 0x15, 0x72, 0x86, 0xb5, 0xd2, 0xff, 0xd9, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0xba, 0x34, 0xd4, 0x10, 0x05, 0x00, 0x00,
}

func (this *ActivityExecutionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityExecutionResult)
	if !ok {
		that2, ok := that.(ActivityExecutionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ActivityExecutionResult_Completed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityExecutionResult_Completed)
	if !ok {
		that2, ok := that.(ActivityExecutionResult_Completed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Completed.Equal(that1.Completed) {
		return false
	}
	return true
}
func (this *ActivityExecutionResult_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityExecutionResult_Failed)
	if !ok {
		that2, ok := that.(ActivityExecutionResult_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *ActivityExecutionResult_Cancelled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityExecutionResult_Cancelled)
	if !ok {
		that2, ok := that.(ActivityExecutionResult_Cancelled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancelled.Equal(that1.Cancelled) {
		return false
	}
	return true
}
func (this *ActivityExecutionResult_WillCompleteAsync) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityExecutionResult_WillCompleteAsync)
	if !ok {
		that2, ok := that.(ActivityExecutionResult_WillCompleteAsync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WillCompleteAsync.Equal(that1.WillCompleteAsync) {
		return false
	}
	return true
}
func (this *ActivityResolution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityResolution)
	if !ok {
		that2, ok := that.(ActivityResolution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Status == nil {
		if this.Status != nil {
			return false
		}
	} else if this.Status == nil {
		return false
	} else if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ActivityResolution_Completed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityResolution_Completed)
	if !ok {
		that2, ok := that.(ActivityResolution_Completed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Completed.Equal(that1.Completed) {
		return false
	}
	return true
}
func (this *ActivityResolution_Failed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityResolution_Failed)
	if !ok {
		that2, ok := that.(ActivityResolution_Failed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failed.Equal(that1.Failed) {
		return false
	}
	return true
}
func (this *ActivityResolution_Cancelled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityResolution_Cancelled)
	if !ok {
		that2, ok := that.(ActivityResolution_Cancelled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancelled.Equal(that1.Cancelled) {
		return false
	}
	return true
}
func (this *ActivityResolution_Backoff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityResolution_Backoff)
	if !ok {
		that2, ok := that.(ActivityResolution_Backoff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Backoff.Equal(that1.Backoff) {
		return false
	}
	return true
}
func (this *Success) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Success)
	if !ok {
		that2, ok := that.(Success)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *Cancellation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cancellation)
	if !ok {
		that2, ok := that.(Cancellation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *WillCompleteAsync) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WillCompleteAsync)
	if !ok {
		that2, ok := that.(WillCompleteAsync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DoBackoff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoBackoff)
	if !ok {
		that2, ok := that.(DoBackoff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if !this.BackoffDuration.Equal(that1.BackoffDuration) {
		return false
	}
	if !this.OriginalScheduleTime.Equal(that1.OriginalScheduleTime) {
		return false
	}
	return true
}
func (this *ActivityExecutionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_activity_result.ActivityExecutionResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityExecutionResult_Completed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityExecutionResult_Completed{` +
		`Completed:` + fmt.Sprintf("%#v", this.Completed) + `}`}, ", ")
	return s
}
func (this *ActivityExecutionResult_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityExecutionResult_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *ActivityExecutionResult_Cancelled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityExecutionResult_Cancelled{` +
		`Cancelled:` + fmt.Sprintf("%#v", this.Cancelled) + `}`}, ", ")
	return s
}
func (this *ActivityExecutionResult_WillCompleteAsync) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityExecutionResult_WillCompleteAsync{` +
		`WillCompleteAsync:` + fmt.Sprintf("%#v", this.WillCompleteAsync) + `}`}, ", ")
	return s
}
func (this *ActivityResolution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_activity_result.ActivityResolution{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityResolution_Completed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityResolution_Completed{` +
		`Completed:` + fmt.Sprintf("%#v", this.Completed) + `}`}, ", ")
	return s
}
func (this *ActivityResolution_Failed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityResolution_Failed{` +
		`Failed:` + fmt.Sprintf("%#v", this.Failed) + `}`}, ", ")
	return s
}
func (this *ActivityResolution_Cancelled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityResolution_Cancelled{` +
		`Cancelled:` + fmt.Sprintf("%#v", this.Cancelled) + `}`}, ", ")
	return s
}
func (this *ActivityResolution_Backoff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_activity_result.ActivityResolution_Backoff{` +
		`Backoff:` + fmt.Sprintf("%#v", this.Backoff) + `}`}, ", ")
	return s
}
func (this *Success) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_activity_result.Success{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_activity_result.Failure{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cancellation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_activity_result.Cancellation{")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WillCompleteAsync) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_activity_result.WillCompleteAsync{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoBackoff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_activity_result.DoBackoff{")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	if this.BackoffDuration != nil {
		s = append(s, "BackoffDuration: "+fmt.Sprintf("%#v", this.BackoffDuration)+",\n")
	}
	if this.OriginalScheduleTime != nil {
		s = append(s, "OriginalScheduleTime: "+fmt.Sprintf("%#v", this.OriginalScheduleTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringActivityResult(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ActivityExecutionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityExecutionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityExecutionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivityExecutionResult_Completed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityExecutionResult_Completed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Completed != nil {
		{
			size, err := m.Completed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ActivityExecutionResult_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityExecutionResult_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ActivityExecutionResult_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityExecutionResult_Cancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelled != nil {
		{
			size, err := m.Cancelled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ActivityExecutionResult_WillCompleteAsync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityExecutionResult_WillCompleteAsync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WillCompleteAsync != nil {
		{
			size, err := m.WillCompleteAsync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ActivityResolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityResolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivityResolution_Completed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResolution_Completed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Completed != nil {
		{
			size, err := m.Completed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ActivityResolution_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResolution_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ActivityResolution_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResolution_Cancelled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancelled != nil {
		{
			size, err := m.Cancelled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ActivityResolution_Backoff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityResolution_Backoff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Backoff != nil {
		{
			size, err := m.Backoff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cancellation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancellation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cancellation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WillCompleteAsync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WillCompleteAsync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WillCompleteAsync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DoBackoff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoBackoff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoBackoff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OriginalScheduleTime != nil {
		{
			size, err := m.OriginalScheduleTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BackoffDuration != nil {
		{
			size, err := m.BackoffDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Attempt != 0 {
		i = encodeVarintActivityResult(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActivityExecutionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *ActivityExecutionResult_Completed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed != nil {
		l = m.Completed.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityExecutionResult_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityExecutionResult_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityExecutionResult_WillCompleteAsync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WillCompleteAsync != nil {
		l = m.WillCompleteAsync.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityResolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *ActivityResolution_Completed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed != nil {
		l = m.Completed.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityResolution_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityResolution_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *ActivityResolution_Backoff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Backoff != nil {
		l = m.Backoff.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}
func (m *Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}

func (m *Cancellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}

func (m *WillCompleteAsync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DoBackoff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attempt != 0 {
		n += 1 + sovActivityResult(uint64(m.Attempt))
	}
	if m.BackoffDuration != nil {
		l = m.BackoffDuration.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	if m.OriginalScheduleTime != nil {
		l = m.OriginalScheduleTime.Size()
		n += 1 + l + sovActivityResult(uint64(l))
	}
	return n
}

func sovActivityResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityResult(x uint64) (n int) {
	return sovActivityResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActivityExecutionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityExecutionResult{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityExecutionResult_Completed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityExecutionResult_Completed{`,
		`Completed:` + strings.Replace(fmt.Sprintf("%v", this.Completed), "Success", "Success", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityExecutionResult_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityExecutionResult_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityExecutionResult_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityExecutionResult_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "Cancellation", "Cancellation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityExecutionResult_WillCompleteAsync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityExecutionResult_WillCompleteAsync{`,
		`WillCompleteAsync:` + strings.Replace(fmt.Sprintf("%v", this.WillCompleteAsync), "WillCompleteAsync", "WillCompleteAsync", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityResolution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityResolution{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityResolution_Completed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityResolution_Completed{`,
		`Completed:` + strings.Replace(fmt.Sprintf("%v", this.Completed), "Success", "Success", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityResolution_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityResolution_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityResolution_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityResolution_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "Cancellation", "Cancellation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityResolution_Backoff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityResolution_Backoff{`,
		`Backoff:` + strings.Replace(fmt.Sprintf("%v", this.Backoff), "DoBackoff", "DoBackoff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Success) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Success{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Payload", "commonpb.Payload", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cancellation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cancellation{`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "v1.Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WillCompleteAsync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WillCompleteAsync{`,
		`}`,
	}, "")
	return s
}
func (this *DoBackoff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoBackoff{`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`BackoffDuration:` + strings.Replace(fmt.Sprintf("%v", this.BackoffDuration), "Duration", "types.Duration", 1) + `,`,
		`OriginalScheduleTime:` + strings.Replace(fmt.Sprintf("%v", this.OriginalScheduleTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActivityResult(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActivityExecutionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityExecutionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityExecutionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityExecutionResult_Completed{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityExecutionResult_Failed{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancellation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityExecutionResult_Cancelled{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WillCompleteAsync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WillCompleteAsync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityExecutionResult_WillCompleteAsync{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityResolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityResolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityResolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityResolution_Completed{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Failure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityResolution_Failed{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancellation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityResolution_Cancelled{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backoff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DoBackoff{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &ActivityResolution_Backoff{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &commonpb.Payload{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cancellation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancellation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancellation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &v1.Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WillCompleteAsync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WillCompleteAsync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WillCompleteAsync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoBackoff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoBackoff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoBackoff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackoffDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackoffDuration == nil {
				m.BackoffDuration = &types.Duration{}
			}
			if err := m.BackoffDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalScheduleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalScheduleTime == nil {
				m.OriginalScheduleTime = &types.Timestamp{}
			}
			if err := m.OriginalScheduleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivityResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityResult = fmt.Errorf("proto: unexpected end of group")
)
