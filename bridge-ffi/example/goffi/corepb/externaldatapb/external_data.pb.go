// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: external_data.proto

package coresdk_external_data

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LocalActivityMarkerData struct {
	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// The number of attempts at execution before we recorded this result. Typically starts at 1,
	// but it is possible to start at a higher number when backing off using a timer.
	Attempt      uint32 `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	ActivityId   string `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType string `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	// You can think of this as "perceived completion time". It is the time the local activity thought
	// it was when it completed. Which could be different from wall-clock time because of workflow
	// replay. It's the WFT start time + the LA's runtime
	CompleteTime *types.Timestamp `protobuf:"bytes,5,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// If set, this local activity conceptually is retrying after the specified backoff.
	// Implementation wise, they are really two different LA machines, but with the same type & input.
	// The retry starts with an attempt number > 1.
	Backoff *types.Duration `protobuf:"bytes,6,opt,name=backoff,proto3" json:"backoff,omitempty"`
	// The time the LA was originally scheduled (wall clock time). This is used to track
	// schedule-to-close timeouts when timer-based backoffs are used
	OriginalScheduleTime *types.Timestamp `protobuf:"bytes,7,opt,name=original_schedule_time,json=originalScheduleTime,proto3" json:"original_schedule_time,omitempty"`
}

func (m *LocalActivityMarkerData) Reset()      { *m = LocalActivityMarkerData{} }
func (*LocalActivityMarkerData) ProtoMessage() {}
func (*LocalActivityMarkerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ef8432011cefc4, []int{0}
}
func (m *LocalActivityMarkerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalActivityMarkerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalActivityMarkerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalActivityMarkerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalActivityMarkerData.Merge(m, src)
}
func (m *LocalActivityMarkerData) XXX_Size() int {
	return m.Size()
}
func (m *LocalActivityMarkerData) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalActivityMarkerData.DiscardUnknown(m)
}

var xxx_messageInfo_LocalActivityMarkerData proto.InternalMessageInfo

func (m *LocalActivityMarkerData) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *LocalActivityMarkerData) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *LocalActivityMarkerData) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *LocalActivityMarkerData) GetActivityType() string {
	if m != nil {
		return m.ActivityType
	}
	return ""
}

func (m *LocalActivityMarkerData) GetCompleteTime() *types.Timestamp {
	if m != nil {
		return m.CompleteTime
	}
	return nil
}

func (m *LocalActivityMarkerData) GetBackoff() *types.Duration {
	if m != nil {
		return m.Backoff
	}
	return nil
}

func (m *LocalActivityMarkerData) GetOriginalScheduleTime() *types.Timestamp {
	if m != nil {
		return m.OriginalScheduleTime
	}
	return nil
}

func init() {
	proto.RegisterType((*LocalActivityMarkerData)(nil), "coresdk.external_data.LocalActivityMarkerData")
}

func init() { proto.RegisterFile("external_data.proto", fileDescriptor_d4ef8432011cefc4) }

var fileDescriptor_d4ef8432011cefc4 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x3b, 0xf0, 0x7d, 0x10, 0x07, 0x48, 0xcc, 0xf8, 0xaf, 0xb2, 0xb8, 0x10, 0xdd, 0xb0,
	0x2a, 0x89, 0xb8, 0x37, 0x1a, 0x36, 0x26, 0x9a, 0x98, 0xca, 0x9e, 0x0c, 0xed, 0x80, 0x0d, 0x2d,
	0x53, 0xa7, 0x17, 0x23, 0x3b, 0x1f, 0xc1, 0xc7, 0xf0, 0x51, 0x5c, 0x92, 0xb8, 0x61, 0x29, 0xc3,
	0xc6, 0x25, 0x8f, 0x60, 0x5a, 0x3a, 0x26, 0xea, 0xc2, 0x5d, 0x7b, 0xce, 0xf9, 0xdd, 0x3b, 0xe7,
	0xd2, 0x1d, 0xf1, 0x88, 0x42, 0x4d, 0x78, 0xd8, 0xf7, 0x39, 0x72, 0x27, 0x56, 0x12, 0x25, 0xdb,
	0xf3, 0xa4, 0x12, 0x89, 0x3f, 0x76, 0xbe, 0x99, 0x75, 0x18, 0x49, 0x39, 0x0a, 0x45, 0x3b, 0x0b,
	0x0d, 0xa6, 0xc3, 0xb6, 0x3f, 0x55, 0x1c, 0x03, 0x39, 0xd9, 0x60, 0xf5, 0xc6, 0x4f, 0x1f, 0x83,
	0x48, 0x24, 0xc8, 0xa3, 0x78, 0x13, 0x38, 0x7a, 0x2b, 0xd0, 0x83, 0x2b, 0xe9, 0xf1, 0xf0, 0xdc,
	0xc3, 0xe0, 0x21, 0xc0, 0xd9, 0x35, 0x57, 0x63, 0xa1, 0xba, 0x1c, 0x39, 0xdb, 0xa6, 0xc5, 0x44,
	0xdc, 0xdb, 0xa4, 0x49, 0x5a, 0x35, 0x37, 0xfd, 0x64, 0x36, 0x2d, 0x73, 0x44, 0x11, 0xc5, 0x68,
	0x17, 0x32, 0xd5, 0xfc, 0xb2, 0x06, 0xad, 0xf0, 0x7c, 0x42, 0x3f, 0xf0, 0xed, 0x62, 0x93, 0xb4,
	0xb6, 0x5c, 0x6a, 0xa4, 0x4b, 0x9f, 0x1d, 0xd3, 0xda, 0x57, 0x00, 0x67, 0xb1, 0xb0, 0xff, 0x65,
	0x91, 0xaa, 0x11, 0x7b, 0xb3, 0x58, 0xb0, 0x33, 0x5a, 0xf3, 0x64, 0x14, 0x87, 0x02, 0x45, 0x3f,
	0x7d, 0xa9, 0xfd, 0xbf, 0x49, 0x5a, 0x95, 0x93, 0xba, 0xb3, 0xa9, 0xe1, 0x98, 0x1a, 0x4e, 0xcf,
	0xd4, 0x70, 0xab, 0x06, 0x48, 0x25, 0xd6, 0xa1, 0xe5, 0x01, 0xf7, 0xc6, 0x72, 0x38, 0xb4, 0x4b,
	0x19, 0x7a, 0xf8, 0x0b, 0xed, 0xe6, 0x17, 0x72, 0x4d, 0x92, 0xdd, 0xd0, 0x7d, 0xa9, 0x82, 0x51,
	0x90, 0x5e, 0x35, 0xf1, 0xee, 0x84, 0x3f, 0x0d, 0xf3, 0xf5, 0xe5, 0x3f, 0xd7, 0xef, 0x1a, 0xf2,
	0x36, 0x07, 0x53, 0xeb, 0xe2, 0x74, 0xbe, 0x04, 0x6b, 0xb1, 0x04, 0x6b, 0xbd, 0x04, 0xf2, 0xa4,
	0x81, 0xbc, 0x68, 0x20, 0xaf, 0x1a, 0xc8, 0x5c, 0x03, 0x79, 0xd7, 0x40, 0x3e, 0x34, 0x58, 0x6b,
	0x0d, 0xe4, 0x79, 0x05, 0xd6, 0x7c, 0x05, 0xd6, 0x62, 0x05, 0xd6, 0xa0, 0x94, 0xcd, 0xef, 0x7c,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xa1, 0x5e, 0xed, 0x01, 0x02, 0x00, 0x00,
}

func (this *LocalActivityMarkerData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalActivityMarkerData)
	if !ok {
		that2, ok := that.(LocalActivityMarkerData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.ActivityType != that1.ActivityType {
		return false
	}
	if !this.CompleteTime.Equal(that1.CompleteTime) {
		return false
	}
	if !this.Backoff.Equal(that1.Backoff) {
		return false
	}
	if !this.OriginalScheduleTime.Equal(that1.OriginalScheduleTime) {
		return false
	}
	return true
}
func (this *LocalActivityMarkerData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&coresdk_external_data.LocalActivityMarkerData{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	if this.CompleteTime != nil {
		s = append(s, "CompleteTime: "+fmt.Sprintf("%#v", this.CompleteTime)+",\n")
	}
	if this.Backoff != nil {
		s = append(s, "Backoff: "+fmt.Sprintf("%#v", this.Backoff)+",\n")
	}
	if this.OriginalScheduleTime != nil {
		s = append(s, "OriginalScheduleTime: "+fmt.Sprintf("%#v", this.OriginalScheduleTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExternalData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LocalActivityMarkerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalActivityMarkerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalActivityMarkerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OriginalScheduleTime != nil {
		{
			size, err := m.OriginalScheduleTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Backoff != nil {
		{
			size, err := m.Backoff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CompleteTime != nil {
		{
			size, err := m.CompleteTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityType) > 0 {
		i -= len(m.ActivityType)
		copy(dAtA[i:], m.ActivityType)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.ActivityType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Attempt != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExternalData(dAtA []byte, offset int, v uint64) int {
	offset -= sovExternalData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalActivityMarkerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovExternalData(uint64(m.Seq))
	}
	if m.Attempt != 0 {
		n += 1 + sovExternalData(uint64(m.Attempt))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	l = len(m.ActivityType)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	if m.CompleteTime != nil {
		l = m.CompleteTime.Size()
		n += 1 + l + sovExternalData(uint64(l))
	}
	if m.Backoff != nil {
		l = m.Backoff.Size()
		n += 1 + l + sovExternalData(uint64(l))
	}
	if m.OriginalScheduleTime != nil {
		l = m.OriginalScheduleTime.Size()
		n += 1 + l + sovExternalData(uint64(l))
	}
	return n
}

func sovExternalData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExternalData(x uint64) (n int) {
	return sovExternalData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LocalActivityMarkerData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalActivityMarkerData{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + fmt.Sprintf("%v", this.ActivityType) + `,`,
		`CompleteTime:` + strings.Replace(fmt.Sprintf("%v", this.CompleteTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Backoff:` + strings.Replace(fmt.Sprintf("%v", this.Backoff), "Duration", "types.Duration", 1) + `,`,
		`OriginalScheduleTime:` + strings.Replace(fmt.Sprintf("%v", this.OriginalScheduleTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExternalData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LocalActivityMarkerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalActivityMarkerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalActivityMarkerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteTime == nil {
				m.CompleteTime = &types.Timestamp{}
			}
			if err := m.CompleteTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backoff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Backoff == nil {
				m.Backoff = &types.Duration{}
			}
			if err := m.Backoff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalScheduleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalScheduleTime == nil {
				m.OriginalScheduleTime = &types.Timestamp{}
			}
			if err := m.OriginalScheduleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExternalData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExternalData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExternalData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExternalData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExternalData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExternalData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExternalData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExternalData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExternalData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExternalData = fmt.Errorf("proto: unexpected end of group")
)
