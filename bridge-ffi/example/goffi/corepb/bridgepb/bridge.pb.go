// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge.proto

package coresdk_bridge

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	corepb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb"
	activitytaskpb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb/activitytaskpb"
	workflowactivationpb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb/workflowactivationpb"
	workflowcompletionpb "github.com/temporalio/sdk-core/bridge-ffi/example/goffi/corepb/workflowcompletionpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogLevel int32

const (
	LOG_LEVEL_UNSPECIFIED LogLevel = 0
	OFF                   LogLevel = 1
	ERROR                 LogLevel = 2
	WARN                  LogLevel = 3
	INFO                  LogLevel = 4
	DEBUG                 LogLevel = 5
	TRACE                 LogLevel = 6
)

var LogLevel_name = map[int32]string{
	0: "Unspecified",
	1: "Off",
	2: "Error",
	3: "Warn",
	4: "Info",
	5: "Debug",
	6: "Trace",
}

var LogLevel_value = map[string]int32{
	"Unspecified": 0,
	"Off":         1,
	"Error":       2,
	"Warn":        3,
	"Info":        4,
	"Debug":       5,
	"Trace":       6,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0}
}

type InitRequest struct {
	GatewayOptions   *InitRequest_GatewayOptions   `protobuf:"bytes,1,opt,name=gateway_options,json=gatewayOptions,proto3" json:"gateway_options,omitempty"`
	TelemetryOptions *InitRequest_TelemetryOptions `protobuf:"bytes,2,opt,name=telemetry_options,json=telemetryOptions,proto3" json:"telemetry_options,omitempty"`
}

func (m *InitRequest) Reset()      { *m = InitRequest{} }
func (*InitRequest) ProtoMessage() {}
func (*InitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0}
}
func (m *InitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRequest.Merge(m, src)
}
func (m *InitRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitRequest proto.InternalMessageInfo

func (m *InitRequest) GetGatewayOptions() *InitRequest_GatewayOptions {
	if m != nil {
		return m.GatewayOptions
	}
	return nil
}

func (m *InitRequest) GetTelemetryOptions() *InitRequest_TelemetryOptions {
	if m != nil {
		return m.TelemetryOptions
	}
	return nil
}

type InitRequest_GatewayOptions struct {
	TargetUrl      string                   `protobuf:"bytes,1,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	Namespace      string                   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClientName     string                   `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion  string                   `protobuf:"bytes,4,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	StaticHeaders  map[string]string        `protobuf:"bytes,5,rep,name=static_headers,json=staticHeaders,proto3" json:"static_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Identity       string                   `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
	WorkerBinaryId string                   `protobuf:"bytes,7,opt,name=worker_binary_id,json=workerBinaryId,proto3" json:"worker_binary_id,omitempty"`
	TlsConfig      *InitRequest_TlsConfig   `protobuf:"bytes,8,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	RetryConfig    *InitRequest_RetryConfig `protobuf:"bytes,9,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
}

func (m *InitRequest_GatewayOptions) Reset()      { *m = InitRequest_GatewayOptions{} }
func (*InitRequest_GatewayOptions) ProtoMessage() {}
func (*InitRequest_GatewayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0, 0}
}
func (m *InitRequest_GatewayOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitRequest_GatewayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitRequest_GatewayOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitRequest_GatewayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRequest_GatewayOptions.Merge(m, src)
}
func (m *InitRequest_GatewayOptions) XXX_Size() int {
	return m.Size()
}
func (m *InitRequest_GatewayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRequest_GatewayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InitRequest_GatewayOptions proto.InternalMessageInfo

func (m *InitRequest_GatewayOptions) GetTargetUrl() string {
	if m != nil {
		return m.TargetUrl
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetStaticHeaders() map[string]string {
	if m != nil {
		return m.StaticHeaders
	}
	return nil
}

func (m *InitRequest_GatewayOptions) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetWorkerBinaryId() string {
	if m != nil {
		return m.WorkerBinaryId
	}
	return ""
}

func (m *InitRequest_GatewayOptions) GetTlsConfig() *InitRequest_TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *InitRequest_GatewayOptions) GetRetryConfig() *InitRequest_RetryConfig {
	if m != nil {
		return m.RetryConfig
	}
	return nil
}

type InitRequest_TlsConfig struct {
	ServerRootCaCert []byte `protobuf:"bytes,1,opt,name=server_root_ca_cert,json=serverRootCaCert,proto3" json:"server_root_ca_cert,omitempty"`
	Domain           string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	ClientCert       []byte `protobuf:"bytes,3,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ClientPrivateKey []byte `protobuf:"bytes,4,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
}

func (m *InitRequest_TlsConfig) Reset()      { *m = InitRequest_TlsConfig{} }
func (*InitRequest_TlsConfig) ProtoMessage() {}
func (*InitRequest_TlsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0, 1}
}
func (m *InitRequest_TlsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitRequest_TlsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitRequest_TlsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitRequest_TlsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRequest_TlsConfig.Merge(m, src)
}
func (m *InitRequest_TlsConfig) XXX_Size() int {
	return m.Size()
}
func (m *InitRequest_TlsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRequest_TlsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InitRequest_TlsConfig proto.InternalMessageInfo

func (m *InitRequest_TlsConfig) GetServerRootCaCert() []byte {
	if m != nil {
		return m.ServerRootCaCert
	}
	return nil
}

func (m *InitRequest_TlsConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *InitRequest_TlsConfig) GetClientCert() []byte {
	if m != nil {
		return m.ClientCert
	}
	return nil
}

func (m *InitRequest_TlsConfig) GetClientPrivateKey() []byte {
	if m != nil {
		return m.ClientPrivateKey
	}
	return nil
}

type InitRequest_RetryConfig struct {
	InitialInterval     *types.Duration    `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	RandomizationFactor *types.DoubleValue `protobuf:"bytes,2,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	Multiplier          *types.DoubleValue `protobuf:"bytes,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	MaxInterval         *types.Duration    `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	MaxElapsedTime      *types.Duration    `protobuf:"bytes,5,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
	MaxRetries          *types.UInt32Value `protobuf:"bytes,6,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
}

func (m *InitRequest_RetryConfig) Reset()      { *m = InitRequest_RetryConfig{} }
func (*InitRequest_RetryConfig) ProtoMessage() {}
func (*InitRequest_RetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0, 2}
}
func (m *InitRequest_RetryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitRequest_RetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitRequest_RetryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitRequest_RetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRequest_RetryConfig.Merge(m, src)
}
func (m *InitRequest_RetryConfig) XXX_Size() int {
	return m.Size()
}
func (m *InitRequest_RetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRequest_RetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InitRequest_RetryConfig proto.InternalMessageInfo

func (m *InitRequest_RetryConfig) GetInitialInterval() *types.Duration {
	if m != nil {
		return m.InitialInterval
	}
	return nil
}

func (m *InitRequest_RetryConfig) GetRandomizationFactor() *types.DoubleValue {
	if m != nil {
		return m.RandomizationFactor
	}
	return nil
}

func (m *InitRequest_RetryConfig) GetMultiplier() *types.DoubleValue {
	if m != nil {
		return m.Multiplier
	}
	return nil
}

func (m *InitRequest_RetryConfig) GetMaxInterval() *types.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

func (m *InitRequest_RetryConfig) GetMaxElapsedTime() *types.Duration {
	if m != nil {
		return m.MaxElapsedTime
	}
	return nil
}

func (m *InitRequest_RetryConfig) GetMaxRetries() *types.UInt32Value {
	if m != nil {
		return m.MaxRetries
	}
	return nil
}

type InitRequest_TelemetryOptions struct {
	OtelCollectorUrl            string   `protobuf:"bytes,1,opt,name=otel_collector_url,json=otelCollectorUrl,proto3" json:"otel_collector_url,omitempty"`
	TracingFilter               string   `protobuf:"bytes,2,opt,name=tracing_filter,json=tracingFilter,proto3" json:"tracing_filter,omitempty"`
	LogForwardingLevel          LogLevel `protobuf:"varint,3,opt,name=log_forwarding_level,json=logForwardingLevel,proto3,enum=coresdk.bridge.LogLevel" json:"log_forwarding_level,omitempty"`
	PrometheusExportBindAddress string   `protobuf:"bytes,4,opt,name=prometheus_export_bind_address,json=prometheusExportBindAddress,proto3" json:"prometheus_export_bind_address,omitempty"`
}

func (m *InitRequest_TelemetryOptions) Reset()      { *m = InitRequest_TelemetryOptions{} }
func (*InitRequest_TelemetryOptions) ProtoMessage() {}
func (*InitRequest_TelemetryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{0, 3}
}
func (m *InitRequest_TelemetryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitRequest_TelemetryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitRequest_TelemetryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitRequest_TelemetryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitRequest_TelemetryOptions.Merge(m, src)
}
func (m *InitRequest_TelemetryOptions) XXX_Size() int {
	return m.Size()
}
func (m *InitRequest_TelemetryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InitRequest_TelemetryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InitRequest_TelemetryOptions proto.InternalMessageInfo

func (m *InitRequest_TelemetryOptions) GetOtelCollectorUrl() string {
	if m != nil {
		return m.OtelCollectorUrl
	}
	return ""
}

func (m *InitRequest_TelemetryOptions) GetTracingFilter() string {
	if m != nil {
		return m.TracingFilter
	}
	return ""
}

func (m *InitRequest_TelemetryOptions) GetLogForwardingLevel() LogLevel {
	if m != nil {
		return m.LogForwardingLevel
	}
	return LOG_LEVEL_UNSPECIFIED
}

func (m *InitRequest_TelemetryOptions) GetPrometheusExportBindAddress() string {
	if m != nil {
		return m.PrometheusExportBindAddress
	}
	return ""
}

type InitResponse struct {
	Error *InitResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *InitResponse) Reset()      { *m = InitResponse{} }
func (*InitResponse) ProtoMessage() {}
func (*InitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{1}
}
func (m *InitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitResponse.Merge(m, src)
}
func (m *InitResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitResponse proto.InternalMessageInfo

func (m *InitResponse) GetError() *InitResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type InitResponse_Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *InitResponse_Error) Reset()      { *m = InitResponse_Error{} }
func (*InitResponse_Error) ProtoMessage() {}
func (*InitResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{1, 0}
}
func (m *InitResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitResponse_Error.Merge(m, src)
}
func (m *InitResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *InitResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_InitResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_InitResponse_Error proto.InternalMessageInfo

func (m *InitResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RegisterWorkerRequest struct {
	TaskQueue                         string             `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	MaxCachedWorkflows                *types.UInt32Value `protobuf:"bytes,2,opt,name=max_cached_workflows,json=maxCachedWorkflows,proto3" json:"max_cached_workflows,omitempty"`
	MaxOutstandingWorkflowTasks       *types.UInt32Value `protobuf:"bytes,3,opt,name=max_outstanding_workflow_tasks,json=maxOutstandingWorkflowTasks,proto3" json:"max_outstanding_workflow_tasks,omitempty"`
	MaxOutstandingActivities          *types.UInt32Value `protobuf:"bytes,4,opt,name=max_outstanding_activities,json=maxOutstandingActivities,proto3" json:"max_outstanding_activities,omitempty"`
	MaxOutstandingLocalActivities     *types.UInt32Value `protobuf:"bytes,5,opt,name=max_outstanding_local_activities,json=maxOutstandingLocalActivities,proto3" json:"max_outstanding_local_activities,omitempty"`
	MaxConcurrentWftPolls             *types.UInt32Value `protobuf:"bytes,6,opt,name=max_concurrent_wft_polls,json=maxConcurrentWftPolls,proto3" json:"max_concurrent_wft_polls,omitempty"`
	NonstickyToStickyPollRatio        *types.FloatValue  `protobuf:"bytes,7,opt,name=nonsticky_to_sticky_poll_ratio,json=nonstickyToStickyPollRatio,proto3" json:"nonsticky_to_sticky_poll_ratio,omitempty"`
	MaxConcurrentAtPolls              *types.UInt32Value `protobuf:"bytes,8,opt,name=max_concurrent_at_polls,json=maxConcurrentAtPolls,proto3" json:"max_concurrent_at_polls,omitempty"`
	NoRemoteActivities                bool               `protobuf:"varint,9,opt,name=no_remote_activities,json=noRemoteActivities,proto3" json:"no_remote_activities,omitempty"`
	StickyQueueScheduleToStartTimeout *types.Duration    `protobuf:"bytes,10,opt,name=sticky_queue_schedule_to_start_timeout,json=stickyQueueScheduleToStartTimeout,proto3" json:"sticky_queue_schedule_to_start_timeout,omitempty"`
	MaxHeartbeatThrottleInterval      *types.Duration    `protobuf:"bytes,11,opt,name=max_heartbeat_throttle_interval,json=maxHeartbeatThrottleInterval,proto3" json:"max_heartbeat_throttle_interval,omitempty"`
	DefaultHeartbeatThrottleInterval  *types.Duration    `protobuf:"bytes,12,opt,name=default_heartbeat_throttle_interval,json=defaultHeartbeatThrottleInterval,proto3" json:"default_heartbeat_throttle_interval,omitempty"`
}

func (m *RegisterWorkerRequest) Reset()      { *m = RegisterWorkerRequest{} }
func (*RegisterWorkerRequest) ProtoMessage() {}
func (*RegisterWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{2}
}
func (m *RegisterWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWorkerRequest.Merge(m, src)
}
func (m *RegisterWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWorkerRequest proto.InternalMessageInfo

func (m *RegisterWorkerRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *RegisterWorkerRequest) GetMaxCachedWorkflows() *types.UInt32Value {
	if m != nil {
		return m.MaxCachedWorkflows
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxOutstandingWorkflowTasks() *types.UInt32Value {
	if m != nil {
		return m.MaxOutstandingWorkflowTasks
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxOutstandingActivities() *types.UInt32Value {
	if m != nil {
		return m.MaxOutstandingActivities
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxOutstandingLocalActivities() *types.UInt32Value {
	if m != nil {
		return m.MaxOutstandingLocalActivities
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxConcurrentWftPolls() *types.UInt32Value {
	if m != nil {
		return m.MaxConcurrentWftPolls
	}
	return nil
}

func (m *RegisterWorkerRequest) GetNonstickyToStickyPollRatio() *types.FloatValue {
	if m != nil {
		return m.NonstickyToStickyPollRatio
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxConcurrentAtPolls() *types.UInt32Value {
	if m != nil {
		return m.MaxConcurrentAtPolls
	}
	return nil
}

func (m *RegisterWorkerRequest) GetNoRemoteActivities() bool {
	if m != nil {
		return m.NoRemoteActivities
	}
	return false
}

func (m *RegisterWorkerRequest) GetStickyQueueScheduleToStartTimeout() *types.Duration {
	if m != nil {
		return m.StickyQueueScheduleToStartTimeout
	}
	return nil
}

func (m *RegisterWorkerRequest) GetMaxHeartbeatThrottleInterval() *types.Duration {
	if m != nil {
		return m.MaxHeartbeatThrottleInterval
	}
	return nil
}

func (m *RegisterWorkerRequest) GetDefaultHeartbeatThrottleInterval() *types.Duration {
	if m != nil {
		return m.DefaultHeartbeatThrottleInterval
	}
	return nil
}

type RegisterWorkerResponse struct {
	Error *RegisterWorkerResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RegisterWorkerResponse) Reset()      { *m = RegisterWorkerResponse{} }
func (*RegisterWorkerResponse) ProtoMessage() {}
func (*RegisterWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{3}
}
func (m *RegisterWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWorkerResponse.Merge(m, src)
}
func (m *RegisterWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWorkerResponse proto.InternalMessageInfo

func (m *RegisterWorkerResponse) GetError() *RegisterWorkerResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type RegisterWorkerResponse_Error struct {
	Message                 string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	WorkerAlreadyRegistered bool   `protobuf:"varint,2,opt,name=worker_already_registered,json=workerAlreadyRegistered,proto3" json:"worker_already_registered,omitempty"`
}

func (m *RegisterWorkerResponse_Error) Reset()      { *m = RegisterWorkerResponse_Error{} }
func (*RegisterWorkerResponse_Error) ProtoMessage() {}
func (*RegisterWorkerResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{3, 0}
}
func (m *RegisterWorkerResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterWorkerResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterWorkerResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterWorkerResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterWorkerResponse_Error.Merge(m, src)
}
func (m *RegisterWorkerResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *RegisterWorkerResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterWorkerResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterWorkerResponse_Error proto.InternalMessageInfo

func (m *RegisterWorkerResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RegisterWorkerResponse_Error) GetWorkerAlreadyRegistered() bool {
	if m != nil {
		return m.WorkerAlreadyRegistered
	}
	return false
}

type PollWorkflowActivationRequest struct {
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (m *PollWorkflowActivationRequest) Reset()      { *m = PollWorkflowActivationRequest{} }
func (*PollWorkflowActivationRequest) ProtoMessage() {}
func (*PollWorkflowActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{4}
}
func (m *PollWorkflowActivationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollWorkflowActivationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollWorkflowActivationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollWorkflowActivationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollWorkflowActivationRequest.Merge(m, src)
}
func (m *PollWorkflowActivationRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollWorkflowActivationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollWorkflowActivationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollWorkflowActivationRequest proto.InternalMessageInfo

func (m *PollWorkflowActivationRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

type PollWorkflowActivationResponse struct {
	// Types that are valid to be assigned to Response:
	//	*PollWorkflowActivationResponse_Activation
	//	*PollWorkflowActivationResponse_Error_
	Response isPollWorkflowActivationResponse_Response `protobuf_oneof:"response"`
}

func (m *PollWorkflowActivationResponse) Reset()      { *m = PollWorkflowActivationResponse{} }
func (*PollWorkflowActivationResponse) ProtoMessage() {}
func (*PollWorkflowActivationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{5}
}
func (m *PollWorkflowActivationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollWorkflowActivationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollWorkflowActivationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollWorkflowActivationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollWorkflowActivationResponse.Merge(m, src)
}
func (m *PollWorkflowActivationResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollWorkflowActivationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollWorkflowActivationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollWorkflowActivationResponse proto.InternalMessageInfo

type isPollWorkflowActivationResponse_Response interface {
	isPollWorkflowActivationResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PollWorkflowActivationResponse_Activation struct {
	Activation *workflowactivationpb.WorkflowActivation `protobuf:"bytes,1,opt,name=activation,proto3,oneof" json:"activation,omitempty"`
}
type PollWorkflowActivationResponse_Error_ struct {
	Error *PollWorkflowActivationResponse_Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*PollWorkflowActivationResponse_Activation) isPollWorkflowActivationResponse_Response() {}
func (*PollWorkflowActivationResponse_Error_) isPollWorkflowActivationResponse_Response()     {}

func (m *PollWorkflowActivationResponse) GetResponse() isPollWorkflowActivationResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PollWorkflowActivationResponse) GetActivation() *workflowactivationpb.WorkflowActivation {
	if x, ok := m.GetResponse().(*PollWorkflowActivationResponse_Activation); ok {
		return x.Activation
	}
	return nil
}

func (m *PollWorkflowActivationResponse) GetError() *PollWorkflowActivationResponse_Error {
	if x, ok := m.GetResponse().(*PollWorkflowActivationResponse_Error_); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PollWorkflowActivationResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PollWorkflowActivationResponse_Activation)(nil),
		(*PollWorkflowActivationResponse_Error_)(nil),
	}
}

type PollWorkflowActivationResponse_Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PollWorkflowActivationResponse_Error) Reset()      { *m = PollWorkflowActivationResponse_Error{} }
func (*PollWorkflowActivationResponse_Error) ProtoMessage() {}
func (*PollWorkflowActivationResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{5, 0}
}
func (m *PollWorkflowActivationResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollWorkflowActivationResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollWorkflowActivationResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollWorkflowActivationResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollWorkflowActivationResponse_Error.Merge(m, src)
}
func (m *PollWorkflowActivationResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *PollWorkflowActivationResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_PollWorkflowActivationResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_PollWorkflowActivationResponse_Error proto.InternalMessageInfo

func (m *PollWorkflowActivationResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PollActivityTaskRequest struct {
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (m *PollActivityTaskRequest) Reset()      { *m = PollActivityTaskRequest{} }
func (*PollActivityTaskRequest) ProtoMessage() {}
func (*PollActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{6}
}
func (m *PollActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollActivityTaskRequest.Merge(m, src)
}
func (m *PollActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollActivityTaskRequest proto.InternalMessageInfo

func (m *PollActivityTaskRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

type PollActivityTaskResponse struct {
	// Types that are valid to be assigned to Response:
	//	*PollActivityTaskResponse_Task
	//	*PollActivityTaskResponse_Error_
	Response isPollActivityTaskResponse_Response `protobuf_oneof:"response"`
}

func (m *PollActivityTaskResponse) Reset()      { *m = PollActivityTaskResponse{} }
func (*PollActivityTaskResponse) ProtoMessage() {}
func (*PollActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{7}
}
func (m *PollActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollActivityTaskResponse.Merge(m, src)
}
func (m *PollActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollActivityTaskResponse proto.InternalMessageInfo

type isPollActivityTaskResponse_Response interface {
	isPollActivityTaskResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PollActivityTaskResponse_Task struct {
	Task *activitytaskpb.ActivityTask `protobuf:"bytes,1,opt,name=task,proto3,oneof" json:"task,omitempty"`
}
type PollActivityTaskResponse_Error_ struct {
	Error *PollActivityTaskResponse_Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*PollActivityTaskResponse_Task) isPollActivityTaskResponse_Response()   {}
func (*PollActivityTaskResponse_Error_) isPollActivityTaskResponse_Response() {}

func (m *PollActivityTaskResponse) GetResponse() isPollActivityTaskResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PollActivityTaskResponse) GetTask() *activitytaskpb.ActivityTask {
	if x, ok := m.GetResponse().(*PollActivityTaskResponse_Task); ok {
		return x.Task
	}
	return nil
}

func (m *PollActivityTaskResponse) GetError() *PollActivityTaskResponse_Error {
	if x, ok := m.GetResponse().(*PollActivityTaskResponse_Error_); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PollActivityTaskResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PollActivityTaskResponse_Task)(nil),
		(*PollActivityTaskResponse_Error_)(nil),
	}
}

type PollActivityTaskResponse_Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PollActivityTaskResponse_Error) Reset()      { *m = PollActivityTaskResponse_Error{} }
func (*PollActivityTaskResponse_Error) ProtoMessage() {}
func (*PollActivityTaskResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{7, 0}
}
func (m *PollActivityTaskResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollActivityTaskResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollActivityTaskResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollActivityTaskResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollActivityTaskResponse_Error.Merge(m, src)
}
func (m *PollActivityTaskResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *PollActivityTaskResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_PollActivityTaskResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_PollActivityTaskResponse_Error proto.InternalMessageInfo

func (m *PollActivityTaskResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CompleteWorkflowActivationRequest struct {
	Completion *workflowcompletionpb.WorkflowActivationCompletion `protobuf:"bytes,1,opt,name=completion,proto3" json:"completion,omitempty"`
}

func (m *CompleteWorkflowActivationRequest) Reset()      { *m = CompleteWorkflowActivationRequest{} }
func (*CompleteWorkflowActivationRequest) ProtoMessage() {}
func (*CompleteWorkflowActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{8}
}
func (m *CompleteWorkflowActivationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowActivationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowActivationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowActivationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowActivationRequest.Merge(m, src)
}
func (m *CompleteWorkflowActivationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowActivationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowActivationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowActivationRequest proto.InternalMessageInfo

func (m *CompleteWorkflowActivationRequest) GetCompletion() *workflowcompletionpb.WorkflowActivationCompletion {
	if m != nil {
		return m.Completion
	}
	return nil
}

type CompleteWorkflowActivationResponse struct {
	Error *CompleteWorkflowActivationResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CompleteWorkflowActivationResponse) Reset()      { *m = CompleteWorkflowActivationResponse{} }
func (*CompleteWorkflowActivationResponse) ProtoMessage() {}
func (*CompleteWorkflowActivationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{9}
}
func (m *CompleteWorkflowActivationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowActivationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowActivationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowActivationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowActivationResponse.Merge(m, src)
}
func (m *CompleteWorkflowActivationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowActivationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowActivationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowActivationResponse proto.InternalMessageInfo

func (m *CompleteWorkflowActivationResponse) GetError() *CompleteWorkflowActivationResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type CompleteWorkflowActivationResponse_Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CompleteWorkflowActivationResponse_Error) Reset() {
	*m = CompleteWorkflowActivationResponse_Error{}
}
func (*CompleteWorkflowActivationResponse_Error) ProtoMessage() {}
func (*CompleteWorkflowActivationResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{9, 0}
}
func (m *CompleteWorkflowActivationResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteWorkflowActivationResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteWorkflowActivationResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteWorkflowActivationResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteWorkflowActivationResponse_Error.Merge(m, src)
}
func (m *CompleteWorkflowActivationResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *CompleteWorkflowActivationResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteWorkflowActivationResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteWorkflowActivationResponse_Error proto.InternalMessageInfo

func (m *CompleteWorkflowActivationResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CompleteActivityTaskRequest struct {
	Completion *corepb.ActivityTaskCompletion `protobuf:"bytes,1,opt,name=completion,proto3" json:"completion,omitempty"`
}

func (m *CompleteActivityTaskRequest) Reset()      { *m = CompleteActivityTaskRequest{} }
func (*CompleteActivityTaskRequest) ProtoMessage() {}
func (*CompleteActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{10}
}
func (m *CompleteActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteActivityTaskRequest.Merge(m, src)
}
func (m *CompleteActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompleteActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteActivityTaskRequest proto.InternalMessageInfo

func (m *CompleteActivityTaskRequest) GetCompletion() *corepb.ActivityTaskCompletion {
	if m != nil {
		return m.Completion
	}
	return nil
}

type CompleteActivityTaskResponse struct {
	Error *CompleteActivityTaskResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CompleteActivityTaskResponse) Reset()      { *m = CompleteActivityTaskResponse{} }
func (*CompleteActivityTaskResponse) ProtoMessage() {}
func (*CompleteActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{11}
}
func (m *CompleteActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteActivityTaskResponse.Merge(m, src)
}
func (m *CompleteActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompleteActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteActivityTaskResponse proto.InternalMessageInfo

func (m *CompleteActivityTaskResponse) GetError() *CompleteActivityTaskResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type CompleteActivityTaskResponse_Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CompleteActivityTaskResponse_Error) Reset()      { *m = CompleteActivityTaskResponse_Error{} }
func (*CompleteActivityTaskResponse_Error) ProtoMessage() {}
func (*CompleteActivityTaskResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{11, 0}
}
func (m *CompleteActivityTaskResponse_Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteActivityTaskResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteActivityTaskResponse_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteActivityTaskResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteActivityTaskResponse_Error.Merge(m, src)
}
func (m *CompleteActivityTaskResponse_Error) XXX_Size() int {
	return m.Size()
}
func (m *CompleteActivityTaskResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteActivityTaskResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteActivityTaskResponse_Error proto.InternalMessageInfo

func (m *CompleteActivityTaskResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RecordActivityHeartbeatRequest struct {
	Heartbeat *corepb.ActivityHeartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
}

func (m *RecordActivityHeartbeatRequest) Reset()      { *m = RecordActivityHeartbeatRequest{} }
func (*RecordActivityHeartbeatRequest) ProtoMessage() {}
func (*RecordActivityHeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{12}
}
func (m *RecordActivityHeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityHeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityHeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityHeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityHeartbeatRequest.Merge(m, src)
}
func (m *RecordActivityHeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityHeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityHeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityHeartbeatRequest proto.InternalMessageInfo

func (m *RecordActivityHeartbeatRequest) GetHeartbeat() *corepb.ActivityHeartbeat {
	if m != nil {
		return m.Heartbeat
	}
	return nil
}

type RecordActivityHeartbeatResponse struct {
}

func (m *RecordActivityHeartbeatResponse) Reset()      { *m = RecordActivityHeartbeatResponse{} }
func (*RecordActivityHeartbeatResponse) ProtoMessage() {}
func (*RecordActivityHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{13}
}
func (m *RecordActivityHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordActivityHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordActivityHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordActivityHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordActivityHeartbeatResponse.Merge(m, src)
}
func (m *RecordActivityHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordActivityHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordActivityHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordActivityHeartbeatResponse proto.InternalMessageInfo

type RequestWorkflowEvictionRequest struct {
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	RunId     string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *RequestWorkflowEvictionRequest) Reset()      { *m = RequestWorkflowEvictionRequest{} }
func (*RequestWorkflowEvictionRequest) ProtoMessage() {}
func (*RequestWorkflowEvictionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{14}
}
func (m *RequestWorkflowEvictionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestWorkflowEvictionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestWorkflowEvictionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestWorkflowEvictionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestWorkflowEvictionRequest.Merge(m, src)
}
func (m *RequestWorkflowEvictionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestWorkflowEvictionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestWorkflowEvictionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestWorkflowEvictionRequest proto.InternalMessageInfo

func (m *RequestWorkflowEvictionRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *RequestWorkflowEvictionRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type RequestWorkflowEvictionResponse struct {
}

func (m *RequestWorkflowEvictionResponse) Reset()      { *m = RequestWorkflowEvictionResponse{} }
func (*RequestWorkflowEvictionResponse) ProtoMessage() {}
func (*RequestWorkflowEvictionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{15}
}
func (m *RequestWorkflowEvictionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestWorkflowEvictionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestWorkflowEvictionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestWorkflowEvictionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestWorkflowEvictionResponse.Merge(m, src)
}
func (m *RequestWorkflowEvictionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestWorkflowEvictionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestWorkflowEvictionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestWorkflowEvictionResponse proto.InternalMessageInfo

type ShutdownRequest struct {
}

func (m *ShutdownRequest) Reset()      { *m = ShutdownRequest{} }
func (*ShutdownRequest) ProtoMessage() {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{16}
}
func (m *ShutdownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownRequest.Merge(m, src)
}
func (m *ShutdownRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownRequest proto.InternalMessageInfo

type ShutdownResponse struct {
}

func (m *ShutdownResponse) Reset()      { *m = ShutdownResponse{} }
func (*ShutdownResponse) ProtoMessage() {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{17}
}
func (m *ShutdownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownResponse.Merge(m, src)
}
func (m *ShutdownResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownResponse proto.InternalMessageInfo

type ShutdownWorkerRequest struct {
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (m *ShutdownWorkerRequest) Reset()      { *m = ShutdownWorkerRequest{} }
func (*ShutdownWorkerRequest) ProtoMessage() {}
func (*ShutdownWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{18}
}
func (m *ShutdownWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownWorkerRequest.Merge(m, src)
}
func (m *ShutdownWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownWorkerRequest proto.InternalMessageInfo

func (m *ShutdownWorkerRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

type ShutdownWorkerResponse struct {
}

func (m *ShutdownWorkerResponse) Reset()      { *m = ShutdownWorkerResponse{} }
func (*ShutdownWorkerResponse) ProtoMessage() {}
func (*ShutdownWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{19}
}
func (m *ShutdownWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownWorkerResponse.Merge(m, src)
}
func (m *ShutdownWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownWorkerResponse proto.InternalMessageInfo

type FetchBufferedLogsRequest struct {
}

func (m *FetchBufferedLogsRequest) Reset()      { *m = FetchBufferedLogsRequest{} }
func (*FetchBufferedLogsRequest) ProtoMessage() {}
func (*FetchBufferedLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{20}
}
func (m *FetchBufferedLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchBufferedLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchBufferedLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchBufferedLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchBufferedLogsRequest.Merge(m, src)
}
func (m *FetchBufferedLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchBufferedLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchBufferedLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchBufferedLogsRequest proto.InternalMessageInfo

type FetchBufferedLogsResponse struct {
	Entries []*FetchBufferedLogsResponse_LogEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *FetchBufferedLogsResponse) Reset()      { *m = FetchBufferedLogsResponse{} }
func (*FetchBufferedLogsResponse) ProtoMessage() {}
func (*FetchBufferedLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{21}
}
func (m *FetchBufferedLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchBufferedLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchBufferedLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchBufferedLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchBufferedLogsResponse.Merge(m, src)
}
func (m *FetchBufferedLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchBufferedLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchBufferedLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchBufferedLogsResponse proto.InternalMessageInfo

func (m *FetchBufferedLogsResponse) GetEntries() []*FetchBufferedLogsResponse_LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type FetchBufferedLogsResponse_LogEntry struct {
	Message   string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Level     LogLevel         `protobuf:"varint,3,opt,name=level,proto3,enum=coresdk.bridge.LogLevel" json:"level,omitempty"`
}

func (m *FetchBufferedLogsResponse_LogEntry) Reset()      { *m = FetchBufferedLogsResponse_LogEntry{} }
func (*FetchBufferedLogsResponse_LogEntry) ProtoMessage() {}
func (*FetchBufferedLogsResponse_LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d3ed31acb30cd14, []int{21, 0}
}
func (m *FetchBufferedLogsResponse_LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchBufferedLogsResponse_LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchBufferedLogsResponse_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchBufferedLogsResponse_LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchBufferedLogsResponse_LogEntry.Merge(m, src)
}
func (m *FetchBufferedLogsResponse_LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *FetchBufferedLogsResponse_LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchBufferedLogsResponse_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FetchBufferedLogsResponse_LogEntry proto.InternalMessageInfo

func (m *FetchBufferedLogsResponse_LogEntry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FetchBufferedLogsResponse_LogEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *FetchBufferedLogsResponse_LogEntry) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LOG_LEVEL_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("coresdk.bridge.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*InitRequest)(nil), "coresdk.bridge.InitRequest")
	proto.RegisterType((*InitRequest_GatewayOptions)(nil), "coresdk.bridge.InitRequest.GatewayOptions")
	proto.RegisterMapType((map[string]string)(nil), "coresdk.bridge.InitRequest.GatewayOptions.StaticHeadersEntry")
	proto.RegisterType((*InitRequest_TlsConfig)(nil), "coresdk.bridge.InitRequest.TlsConfig")
	proto.RegisterType((*InitRequest_RetryConfig)(nil), "coresdk.bridge.InitRequest.RetryConfig")
	proto.RegisterType((*InitRequest_TelemetryOptions)(nil), "coresdk.bridge.InitRequest.TelemetryOptions")
	proto.RegisterType((*InitResponse)(nil), "coresdk.bridge.InitResponse")
	proto.RegisterType((*InitResponse_Error)(nil), "coresdk.bridge.InitResponse.Error")
	proto.RegisterType((*RegisterWorkerRequest)(nil), "coresdk.bridge.RegisterWorkerRequest")
	proto.RegisterType((*RegisterWorkerResponse)(nil), "coresdk.bridge.RegisterWorkerResponse")
	proto.RegisterType((*RegisterWorkerResponse_Error)(nil), "coresdk.bridge.RegisterWorkerResponse.Error")
	proto.RegisterType((*PollWorkflowActivationRequest)(nil), "coresdk.bridge.PollWorkflowActivationRequest")
	proto.RegisterType((*PollWorkflowActivationResponse)(nil), "coresdk.bridge.PollWorkflowActivationResponse")
	proto.RegisterType((*PollWorkflowActivationResponse_Error)(nil), "coresdk.bridge.PollWorkflowActivationResponse.Error")
	proto.RegisterType((*PollActivityTaskRequest)(nil), "coresdk.bridge.PollActivityTaskRequest")
	proto.RegisterType((*PollActivityTaskResponse)(nil), "coresdk.bridge.PollActivityTaskResponse")
	proto.RegisterType((*PollActivityTaskResponse_Error)(nil), "coresdk.bridge.PollActivityTaskResponse.Error")
	proto.RegisterType((*CompleteWorkflowActivationRequest)(nil), "coresdk.bridge.CompleteWorkflowActivationRequest")
	proto.RegisterType((*CompleteWorkflowActivationResponse)(nil), "coresdk.bridge.CompleteWorkflowActivationResponse")
	proto.RegisterType((*CompleteWorkflowActivationResponse_Error)(nil), "coresdk.bridge.CompleteWorkflowActivationResponse.Error")
	proto.RegisterType((*CompleteActivityTaskRequest)(nil), "coresdk.bridge.CompleteActivityTaskRequest")
	proto.RegisterType((*CompleteActivityTaskResponse)(nil), "coresdk.bridge.CompleteActivityTaskResponse")
	proto.RegisterType((*CompleteActivityTaskResponse_Error)(nil), "coresdk.bridge.CompleteActivityTaskResponse.Error")
	proto.RegisterType((*RecordActivityHeartbeatRequest)(nil), "coresdk.bridge.RecordActivityHeartbeatRequest")
	proto.RegisterType((*RecordActivityHeartbeatResponse)(nil), "coresdk.bridge.RecordActivityHeartbeatResponse")
	proto.RegisterType((*RequestWorkflowEvictionRequest)(nil), "coresdk.bridge.RequestWorkflowEvictionRequest")
	proto.RegisterType((*RequestWorkflowEvictionResponse)(nil), "coresdk.bridge.RequestWorkflowEvictionResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "coresdk.bridge.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "coresdk.bridge.ShutdownResponse")
	proto.RegisterType((*ShutdownWorkerRequest)(nil), "coresdk.bridge.ShutdownWorkerRequest")
	proto.RegisterType((*ShutdownWorkerResponse)(nil), "coresdk.bridge.ShutdownWorkerResponse")
	proto.RegisterType((*FetchBufferedLogsRequest)(nil), "coresdk.bridge.FetchBufferedLogsRequest")
	proto.RegisterType((*FetchBufferedLogsResponse)(nil), "coresdk.bridge.FetchBufferedLogsResponse")
	proto.RegisterType((*FetchBufferedLogsResponse_LogEntry)(nil), "coresdk.bridge.FetchBufferedLogsResponse.LogEntry")
}

func init() { proto.RegisterFile("bridge.proto", fileDescriptor_1d3ed31acb30cd14) }

var fileDescriptor_1d3ed31acb30cd14 = []byte{
	// 1868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x4d, 0x6f, 0x1b, 0xc7,
	0x19, 0xe6, 0x5a, 0xa2, 0x4d, 0xbe, 0x94, 0x69, 0x66, 0x22, 0xd9, 0x34, 0x6d, 0xaf, 0x6c, 0x06,
	0x4e, 0x8d, 0x20, 0xa5, 0x0a, 0x39, 0x28, 0x94, 0x20, 0x69, 0x2a, 0x51, 0xa4, 0xa5, 0x94, 0x90,
	0x9c, 0x95, 0x64, 0x23, 0x01, 0xda, 0xed, 0x68, 0x77, 0x48, 0x2d, 0xb8, 0xbb, 0xc3, 0xcc, 0xce,
	0x4a, 0x62, 0x0f, 0x45, 0xef, 0x05, 0x8a, 0x5e, 0x8a, 0x1e, 0x7a, 0x2a, 0xd0, 0x02, 0xfd, 0x0f,
	0xfd, 0x03, 0x3d, 0xf4, 0xe0, 0x63, 0x8e, 0xb5, 0x7c, 0xe9, 0xd1, 0xc7, 0xa2, 0xa7, 0x62, 0x3e,
	0x76, 0xf9, 0x2d, 0xd1, 0xe8, 0x45, 0xda, 0x7d, 0xe7, 0x7d, 0x9e, 0xf7, 0x63, 0x66, 0x9e, 0xd9,
	0x21, 0x2c, 0x1d, 0x33, 0xcf, 0xed, 0x90, 0x5a, 0x8f, 0x51, 0x4e, 0x51, 0xd1, 0xa1, 0x8c, 0x44,
	0x6e, 0xb7, 0xa6, 0xac, 0x15, 0xb3, 0x43, 0x69, 0xc7, 0x27, 0x6b, 0x72, 0xf4, 0x38, 0x6e, 0xaf,
	0xb9, 0x31, 0xc3, 0xdc, 0xa3, 0xa1, 0xf2, 0xaf, 0xac, 0x8e, 0x8f, 0x73, 0x2f, 0x20, 0x11, 0xc7,
	0x41, 0x4f, 0x3b, 0x4c, 0x10, 0x9c, 0x31, 0xdc, 0xeb, 0x11, 0x16, 0xe9, 0xf1, 0x0f, 0x39, 0x09,
	0x7a, 0x94, 0x61, 0x7f, 0x2d, 0x72, 0xbb, 0x6b, 0x22, 0xba, 0xfc, 0x63, 0x7b, 0x21, 0x27, 0xac,
	0x8d, 0x1d, 0x9d, 0x58, 0xe5, 0xe9, 0xa4, 0x1f, 0x76, 0xb8, 0x77, 0xea, 0xf1, 0xbe, 0xcd, 0x71,
	0xd4, 0x1d, 0x7d, 0xd3, 0xa0, 0x2f, 0x27, 0x41, 0x67, 0x94, 0x75, 0xdb, 0x3e, 0x3d, 0xb3, 0xa5,
	0xbf, 0x2c, 0x65, 0x9a, 0x6d, 0x0e, 0x02, 0x87, 0x06, 0x3d, 0x9f, 0x8c, 0x12, 0x0c, 0x6c, 0x8a,
	0xa0, 0xfa, 0xa7, 0x25, 0x28, 0xec, 0x86, 0x1e, 0xb7, 0xc8, 0x77, 0x31, 0x89, 0x38, 0x3a, 0x80,
	0x5b, 0x1d, 0xcc, 0xc9, 0x19, 0xee, 0xdb, 0xb4, 0x27, 0xfc, 0xa2, 0xb2, 0xf1, 0xd0, 0x78, 0x52,
	0x58, 0xff, 0xa8, 0x36, 0xda, 0xf9, 0xda, 0x10, 0xaa, 0xf6, 0x4c, 0x41, 0xf6, 0x15, 0xc2, 0x2a,
	0x76, 0x46, 0xde, 0xd1, 0x37, 0xf0, 0x1e, 0x27, 0x3e, 0x09, 0x08, 0x67, 0x03, 0xda, 0x6b, 0x92,
	0xf6, 0xe3, 0xcb, 0x68, 0x0f, 0x13, 0x50, 0x42, 0x5c, 0xe2, 0x63, 0x96, 0xca, 0x1f, 0x16, 0xa1,
	0x38, 0x1a, 0x1d, 0x3d, 0x00, 0xe0, 0x98, 0x75, 0x08, 0xb7, 0x63, 0xe6, 0xcb, 0xec, 0xf3, 0x56,
	0x5e, 0x59, 0x8e, 0x98, 0x8f, 0xee, 0x43, 0x3e, 0xc4, 0x01, 0x89, 0x7a, 0xd8, 0x21, 0x32, 0x89,
	0xbc, 0x35, 0x30, 0xa0, 0x55, 0x28, 0x38, 0xbe, 0x47, 0x42, 0x6e, 0x0b, 0x5b, 0x79, 0x41, 0x8e,
	0x83, 0x32, 0xed, 0xe1, 0x80, 0xa0, 0xc7, 0x50, 0xd4, 0x0e, 0xa7, 0x84, 0x45, 0x1e, 0x0d, 0xcb,
	0x8b, 0xd2, 0xe7, 0xa6, 0xb2, 0xbe, 0x50, 0x46, 0xe4, 0x42, 0x31, 0xe2, 0x98, 0x7b, 0x8e, 0x7d,
	0x42, 0xb0, 0x4b, 0x58, 0x54, 0xce, 0x3e, 0x5c, 0x78, 0x52, 0x58, 0xff, 0x62, 0xfe, 0x36, 0xd6,
	0x0e, 0x24, 0xc1, 0x8e, 0xc2, 0x37, 0x42, 0xce, 0xfa, 0xd6, 0xcd, 0x68, 0xd8, 0x86, 0x2a, 0x90,
	0xf3, 0x5c, 0x12, 0x72, 0x8f, 0xf7, 0xcb, 0xd7, 0x65, 0x1a, 0xe9, 0x3b, 0x7a, 0x02, 0x25, 0x31,
	0xed, 0x84, 0xd9, 0xc7, 0x5e, 0x88, 0x59, 0xdf, 0xf6, 0xdc, 0xf2, 0x0d, 0xe9, 0x53, 0x54, 0xf6,
	0x2d, 0x69, 0xde, 0x75, 0xd1, 0x36, 0x00, 0xf7, 0x23, 0xdb, 0xa1, 0x61, 0xdb, 0xeb, 0x94, 0x73,
	0x72, 0x5e, 0x1e, 0x5f, 0x3a, 0x2f, 0x7e, 0x54, 0x97, 0xce, 0x56, 0x9e, 0x27, 0x8f, 0xe8, 0x2b,
	0x58, 0x62, 0x72, 0x82, 0x35, 0x4f, 0x5e, 0xf2, 0xfc, 0xe0, 0x32, 0x1e, 0x4b, 0xf8, 0x6b, 0xa6,
	0x02, 0x1b, 0xbc, 0x54, 0x7e, 0x0a, 0x68, 0xb2, 0x78, 0x54, 0x82, 0x85, 0x2e, 0xe9, 0xeb, 0x19,
	0x15, 0x8f, 0x68, 0x19, 0xb2, 0xa7, 0xd8, 0x8f, 0x93, 0x79, 0x54, 0x2f, 0x9f, 0x5d, 0xdb, 0x30,
	0x2a, 0x7f, 0x36, 0x20, 0x9f, 0xa6, 0x89, 0x7e, 0x08, 0xef, 0x47, 0x84, 0x9d, 0x12, 0x66, 0x33,
	0x4a, 0xb9, 0xed, 0x60, 0xdb, 0x21, 0x8c, 0x4b, 0xa6, 0x25, 0xab, 0xa4, 0x86, 0x2c, 0x4a, 0x79,
	0x1d, 0xd7, 0x09, 0xe3, 0xe8, 0x36, 0x5c, 0x77, 0x69, 0x80, 0xbd, 0x50, 0xf3, 0xea, 0xb7, 0xa1,
	0xc5, 0x21, 0xe1, 0x0b, 0x12, 0xae, 0x17, 0x87, 0x04, 0x7e, 0x0c, 0x48, 0x3b, 0xf4, 0x98, 0xd8,
	0xa8, 0xc4, 0x16, 0x09, 0x2f, 0xaa, 0x30, 0x6a, 0xe4, 0xb9, 0x1a, 0xf8, 0x19, 0xe9, 0x57, 0xfe,
	0xb2, 0x00, 0x85, 0xa1, 0x16, 0xa0, 0x6d, 0x28, 0x79, 0xa1, 0xc7, 0x3d, 0xec, 0x2b, 0x75, 0x39,
	0xc5, 0xbe, 0xde, 0x7c, 0x77, 0x6b, 0x4a, 0xa5, 0x6a, 0x89, 0x4a, 0xd5, 0xb6, 0xb5, 0xcc, 0x59,
	0xb7, 0x34, 0x64, 0x57, 0x23, 0xd0, 0x3e, 0x2c, 0x33, 0x1c, 0xba, 0x34, 0xf0, 0x7e, 0x25, 0x3d,
	0xec, 0x36, 0x76, 0x38, 0x65, 0x7a, 0xbf, 0xdd, 0x9f, 0x64, 0xa2, 0xf1, 0xb1, 0x4f, 0x5e, 0x88,
	0xce, 0x59, 0xef, 0x8f, 0x20, 0x9b, 0x12, 0x88, 0x3e, 0x07, 0x08, 0x62, 0x9f, 0x7b, 0x3d, 0xdf,
	0x23, 0x4c, 0x16, 0x7d, 0x15, 0xcd, 0x90, 0x3f, 0xfa, 0x1c, 0x96, 0x02, 0x7c, 0x3e, 0x28, 0x68,
	0xf1, 0xaa, 0x82, 0x0a, 0x01, 0x3e, 0x4f, 0x8b, 0xa9, 0x43, 0x49, 0xa0, 0x89, 0x8f, 0x7b, 0x11,
	0x71, 0x6d, 0x21, 0xde, 0xe5, 0xec, 0x55, 0x0c, 0xc5, 0x00, 0x9f, 0x37, 0x14, 0xe2, 0xd0, 0x0b,
	0x08, 0xfa, 0x02, 0x04, 0xa7, 0x2d, 0x16, 0x98, 0x47, 0x22, 0xb9, 0x51, 0xa6, 0x55, 0x70, 0xb4,
	0x1b, 0xf2, 0xa7, 0xeb, 0x49, 0x05, 0xf8, 0xdc, 0x52, 0xfe, 0x95, 0xff, 0x18, 0x50, 0x1a, 0x57,
	0x22, 0x31, 0xd3, 0x94, 0x13, 0xdf, 0x76, 0xa8, 0xef, 0x13, 0xd1, 0xa6, 0x21, 0xb1, 0x29, 0x89,
	0x91, 0x7a, 0x32, 0x20, 0x34, 0xe7, 0x31, 0x14, 0x39, 0xc3, 0x8e, 0x17, 0x76, 0xec, 0xb6, 0xe7,
	0x73, 0xc2, 0xf4, 0xc2, 0xba, 0xa9, 0xad, 0x4d, 0x69, 0x44, 0x5f, 0xc1, 0xb2, 0x4f, 0x3b, 0x76,
	0x9b, 0xb2, 0x33, 0xcc, 0x5c, 0xe1, 0xed, 0x93, 0x53, 0xe2, 0xcb, 0x9e, 0x17, 0xd7, 0xcb, 0xe3,
	0x5b, 0xa9, 0x45, 0x3b, 0x2d, 0x31, 0x6e, 0x21, 0x9f, 0x76, 0x9a, 0x29, 0x48, 0xda, 0x50, 0x1d,
	0xcc, 0x1e, 0xa3, 0x01, 0xe1, 0x27, 0x24, 0x8e, 0x6c, 0x72, 0xde, 0xa3, 0x8c, 0x0b, 0x25, 0x70,
	0x6d, 0xec, 0xba, 0x8c, 0x44, 0x91, 0xd6, 0xad, 0x7b, 0x03, 0xaf, 0x86, 0x74, 0xda, 0xf2, 0x42,
	0x77, 0x53, 0xb9, 0x54, 0xbb, 0xb0, 0xa4, 0xf6, 0x6b, 0xd4, 0xa3, 0x61, 0x44, 0xd0, 0x06, 0x64,
	0x09, 0x63, 0x94, 0xe9, 0x65, 0x59, 0x9d, 0xbe, 0xb9, 0x95, 0x73, 0xad, 0x21, 0x3c, 0x2d, 0x05,
	0xa8, 0x3c, 0x82, 0xac, 0x7c, 0x47, 0x65, 0xb8, 0x11, 0x90, 0x28, 0xc2, 0x1d, 0xa2, 0xbb, 0x95,
	0xbc, 0x56, 0xff, 0x9a, 0x83, 0x15, 0x8b, 0x74, 0xbc, 0x88, 0x13, 0xf6, 0x52, 0x2a, 0x54, 0x72,
	0x28, 0x49, 0x45, 0x8f, 0xba, 0xf6, 0x77, 0x31, 0x89, 0xc9, 0x40, 0xd1, 0xa3, 0xee, 0xd7, 0xc2,
	0x80, 0xf6, 0x60, 0x59, 0xcc, 0xaf, 0x83, 0x9d, 0x13, 0xe2, 0xda, 0xc9, 0x59, 0x17, 0xcd, 0x5c,
	0xf1, 0xc3, 0x13, 0x8d, 0x02, 0x7c, 0x5e, 0x97, 0xc0, 0x97, 0x09, 0x0e, 0x61, 0x30, 0x05, 0x1f,
	0x8d, 0x79, 0xc4, 0x71, 0x28, 0xe7, 0x21, 0x3d, 0x40, 0x45, 0xd4, 0x68, 0xe6, 0x26, 0x18, 0x66,
	0xbe, 0x17, 0xe0, 0xf3, 0xfd, 0x01, 0x45, 0x42, 0x7f, 0x28, 0x08, 0xd0, 0xb7, 0x50, 0x19, 0x0f,
	0xa1, 0xbf, 0x0f, 0xc4, 0x0a, 0x5d, 0x9c, 0x83, 0xbe, 0x3c, 0x4a, 0xbf, 0x99, 0xa2, 0x11, 0x81,
	0x87, 0xe3, 0xdc, 0x3e, 0x75, 0xb0, 0x3f, 0x1c, 0x21, 0x3b, 0x47, 0x84, 0x07, 0xa3, 0x11, 0x5a,
	0x82, 0x63, 0x28, 0xcc, 0x11, 0x94, 0x65, 0xd7, 0x69, 0xe8, 0xc4, 0x8c, 0x09, 0xcd, 0x3b, 0x6b,
	0x73, 0xbb, 0x47, 0x7d, 0x7f, 0xbe, 0x2d, 0xb6, 0x22, 0x3a, 0x9f, 0x82, 0x5f, 0xb6, 0xf9, 0x73,
	0x01, 0x45, 0x36, 0x98, 0x21, 0x0d, 0x23, 0xee, 0x39, 0xdd, 0xbe, 0xcd, 0xa9, 0xad, 0x9f, 0x04,
	0xaf, 0x2d, 0xf7, 0xb7, 0x3c, 0xc4, 0x0a, 0xeb, 0xf7, 0x26, 0xc8, 0x9b, 0x3e, 0xc5, 0x5c, 0x71,
	0x57, 0x52, 0x8a, 0x43, 0x7a, 0x20, 0xff, 0x0b, 0x72, 0x4b, 0xc0, 0xd1, 0x01, 0xdc, 0x19, 0xcb,
	0x1b, 0x27, 0x69, 0xe7, 0xe6, 0x48, 0x7b, 0x79, 0x24, 0xed, 0x4d, 0x9d, 0xf5, 0x8f, 0x60, 0x39,
	0xa4, 0x36, 0x23, 0x01, 0xe5, 0x64, 0xb8, 0xcf, 0xe2, 0x10, 0xcc, 0x59, 0x28, 0xa4, 0x96, 0x1c,
	0x1a, 0x6a, 0x9f, 0x0f, 0x1f, 0xea, 0xd2, 0xe4, 0xaa, 0xb6, 0x23, 0xb1, 0x06, 0x63, 0x9f, 0xa8,
	0x9a, 0x31, 0xe3, 0x52, 0xec, 0x68, 0xcc, 0xcb, 0x70, 0x95, 0xde, 0x3d, 0x52, 0x44, 0x72, 0x33,
	0x1c, 0x68, 0x1a, 0x51, 0x37, 0x66, 0xfc, 0x50, 0x71, 0xa0, 0x5f, 0xc2, 0xaa, 0x28, 0xfa, 0x84,
	0x60, 0xc6, 0x8f, 0x09, 0xe6, 0x36, 0x3f, 0x61, 0x94, 0x73, 0x9f, 0x0c, 0x84, 0xb9, 0x70, 0x55,
	0x98, 0xfb, 0x01, 0x3e, 0xdf, 0x49, 0x08, 0x0e, 0x35, 0x3e, 0x55, 0xea, 0x13, 0xf8, 0xc0, 0x25,
	0x6d, 0x1c, 0xfb, 0xfc, 0xd2, 0x28, 0x4b, 0x57, 0x45, 0x79, 0xa8, 0x59, 0x66, 0x46, 0xaa, 0xfe,
	0xdd, 0x80, 0xdb, 0xe3, 0x3a, 0xa1, 0xf5, 0x69, 0x6b, 0x54, 0x9f, 0x26, 0x3e, 0x2e, 0xa7, 0xc3,
	0x46, 0x95, 0xea, 0xe7, 0x57, 0x2a, 0x15, 0xfa, 0x0c, 0xee, 0xea, 0x4f, 0x2b, 0xec, 0x33, 0x82,
	0xdd, 0xbe, 0xcd, 0x34, 0x31, 0x71, 0xa5, 0xea, 0xe4, 0xac, 0x3b, 0xca, 0x61, 0x53, 0x8d, 0x5b,
	0xe9, 0x70, 0xf5, 0x27, 0xf0, 0x40, 0x2c, 0x99, 0x44, 0x0e, 0x36, 0xd3, 0x2f, 0xfa, 0xf9, 0xc4,
	0xae, 0xfa, 0xd6, 0x00, 0x73, 0x16, 0x81, 0xee, 0xc2, 0xd7, 0x00, 0x83, 0x8b, 0x82, 0x6e, 0xc5,
	0x5a, 0xda, 0x8a, 0x69, 0x97, 0x89, 0x49, 0xb2, 0x9d, 0x8c, 0x35, 0x44, 0x82, 0x5a, 0x49, 0x63,
	0x95, 0xa6, 0x7e, 0x32, 0xde, 0xd8, 0xcb, 0x33, 0x52, 0x0d, 0xde, 0xc9, 0xcc, 0x7f, 0x18, 0x6c,
	0x01, 0xe4, 0x98, 0x46, 0x57, 0x37, 0xe0, 0x8e, 0xe0, 0xd7, 0x9b, 0xa7, 0x2f, 0x14, 0x74, 0xce,
	0x66, 0xfd, 0xd3, 0x80, 0xf2, 0x24, 0x54, 0xb7, 0xe9, 0x53, 0x58, 0x14, 0x9e, 0xba, 0x41, 0x1f,
	0xa4, 0x25, 0x8d, 0x5e, 0xd4, 0x86, 0xa1, 0x3b, 0x19, 0x4b, 0x42, 0x50, 0x73, 0xb4, 0x1d, 0xb5,
	0x69, 0xed, 0x98, 0x16, 0xf3, 0xff, 0x6c, 0xc4, 0xaf, 0xe1, 0x51, 0x5d, 0x5d, 0xe0, 0xc8, 0xec,
	0xf5, 0xf3, 0x0d, 0xc0, 0xe0, 0x96, 0xa7, 0x8b, 0xfb, 0x74, 0x72, 0xf6, 0x87, 0x6e, 0x82, 0x93,
	0x5c, 0xf5, 0x74, 0xd0, 0x1a, 0x22, 0xab, 0xfe, 0xd1, 0x80, 0xea, 0x65, 0x09, 0xe8, 0xc6, 0xee,
	0x8d, 0xee, 0xc2, 0x8d, 0xf1, 0xee, 0x5c, 0x4d, 0xf1, 0xce, 0xdf, 0x0e, 0xbf, 0x80, 0x7b, 0x09,
	0xeb, 0xb4, 0x65, 0xf2, 0xe5, 0x94, 0x9e, 0xac, 0xa6, 0x69, 0x0d, 0x23, 0x66, 0x54, 0xfe, 0x5b,
	0x03, 0xee, 0x4f, 0x0f, 0xa0, 0x6b, 0xde, 0x19, 0xad, 0x79, 0x7d, 0x56, 0xcd, 0xb3, 0x57, 0xc5,
	0x3b, 0x54, 0xfb, 0x2d, 0x98, 0x16, 0x71, 0x28, 0x73, 0x13, 0xb6, 0x54, 0x2c, 0x93, 0x82, 0x37,
	0x20, 0x9f, 0xaa, 0xb0, 0x4e, 0xa9, 0x32, 0x51, 0xef, 0x00, 0x35, 0x70, 0xae, 0x3e, 0x82, 0xd5,
	0x99, 0xdc, 0x7a, 0x19, 0xbe, 0x10, 0xe1, 0x65, 0x9c, 0x64, 0x06, 0x1b, 0xa7, 0x9e, 0x33, 0xbf,
	0x86, 0xa1, 0x15, 0xb8, 0xce, 0xe2, 0x50, 0x5c, 0x48, 0xf5, 0xbd, 0x8d, 0xc5, 0xe1, 0xae, 0xab,
	0x42, 0xcf, 0xe0, 0xd5, 0xa1, 0xdf, 0x83, 0x5b, 0x07, 0x27, 0x31, 0x77, 0xe9, 0x59, 0x12, 0xab,
	0x8a, 0xa0, 0x34, 0x30, 0x69, 0xb7, 0x1f, 0xc3, 0x4a, 0x62, 0x7b, 0x97, 0x2f, 0xc9, 0x6a, 0x19,
	0x6e, 0x8f, 0xe3, 0x34, 0x63, 0x05, 0xca, 0x4d, 0xc2, 0x9d, 0x93, 0xad, 0xb8, 0xdd, 0x16, 0x3a,
	0xde, 0xa2, 0x9d, 0x28, 0xc9, 0xe0, 0xbf, 0x06, 0xdc, 0x9d, 0x32, 0xa8, 0x57, 0x46, 0x0b, 0x6e,
	0x90, 0x50, 0xdd, 0x3c, 0x0c, 0xf9, 0x13, 0xc0, 0xc4, 0xda, 0x98, 0x89, 0x15, 0x5f, 0xf8, 0xea,
	0xde, 0x9f, 0x50, 0x54, 0x7e, 0x67, 0x40, 0x2e, 0xb1, 0x5e, 0x72, 0x42, 0x6d, 0x40, 0x3e, 0xfd,
	0xa1, 0x4b, 0x8b, 0x54, 0x65, 0xe2, 0xcc, 0x3d, 0x4c, 0x3c, 0xac, 0x81, 0x33, 0xaa, 0x41, 0x76,
	0xbe, 0x4b, 0x87, 0x72, 0xfb, 0xc8, 0x91, 0xf9, 0xa8, 0x3b, 0xc7, 0x5d, 0x58, 0x69, 0xed, 0x3f,
	0xb3, 0x5b, 0x8d, 0x17, 0x8d, 0x96, 0x7d, 0xb4, 0x77, 0xf0, 0xbc, 0x51, 0xdf, 0x6d, 0xee, 0x36,
	0xb6, 0x4b, 0x19, 0x74, 0x03, 0x16, 0xf6, 0x9b, 0xcd, 0x92, 0x81, 0xf2, 0x90, 0x6d, 0x58, 0xd6,
	0xbe, 0x55, 0xba, 0x86, 0x72, 0xb0, 0xf8, 0x72, 0xd3, 0xda, 0x2b, 0x2d, 0x88, 0xa7, 0xdd, 0xbd,
	0xe6, 0x7e, 0x69, 0x51, 0x0c, 0x6f, 0x37, 0xb6, 0x8e, 0x9e, 0x95, 0xb2, 0xe2, 0xf1, 0xd0, 0xda,
	0xac, 0x37, 0x4a, 0xd7, 0xb7, 0x3e, 0x79, 0xf5, 0xda, 0xcc, 0x7c, 0xff, 0xda, 0xcc, 0xbc, 0x7d,
	0x6d, 0x1a, 0xbf, 0xb9, 0x30, 0x8d, 0xbf, 0x5d, 0x98, 0xc6, 0x3f, 0x2e, 0x4c, 0xe3, 0xd5, 0x85,
	0x69, 0xfc, 0xeb, 0xc2, 0x34, 0xfe, 0x7d, 0x61, 0x66, 0xde, 0x5e, 0x98, 0xc6, 0xef, 0xdf, 0x98,
	0x99, 0x57, 0x6f, 0xcc, 0xcc, 0xf7, 0x6f, 0xcc, 0xcc, 0xf1, 0x75, 0x59, 0xe9, 0xd3, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x5f, 0x74, 0x6c, 0x57, 0x42, 0x14, 0x00, 0x00,
}

func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InitRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitRequest)
	if !ok {
		that2, ok := that.(InitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayOptions.Equal(that1.GatewayOptions) {
		return false
	}
	if !this.TelemetryOptions.Equal(that1.TelemetryOptions) {
		return false
	}
	return true
}
func (this *InitRequest_GatewayOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitRequest_GatewayOptions)
	if !ok {
		that2, ok := that.(InitRequest_GatewayOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetUrl != that1.TargetUrl {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ClientName != that1.ClientName {
		return false
	}
	if this.ClientVersion != that1.ClientVersion {
		return false
	}
	if len(this.StaticHeaders) != len(that1.StaticHeaders) {
		return false
	}
	for i := range this.StaticHeaders {
		if this.StaticHeaders[i] != that1.StaticHeaders[i] {
			return false
		}
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.WorkerBinaryId != that1.WorkerBinaryId {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if !this.RetryConfig.Equal(that1.RetryConfig) {
		return false
	}
	return true
}
func (this *InitRequest_TlsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitRequest_TlsConfig)
	if !ok {
		that2, ok := that.(InitRequest_TlsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ServerRootCaCert, that1.ServerRootCaCert) {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !bytes.Equal(this.ClientCert, that1.ClientCert) {
		return false
	}
	if !bytes.Equal(this.ClientPrivateKey, that1.ClientPrivateKey) {
		return false
	}
	return true
}
func (this *InitRequest_RetryConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitRequest_RetryConfig)
	if !ok {
		that2, ok := that.(InitRequest_RetryConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InitialInterval.Equal(that1.InitialInterval) {
		return false
	}
	if !this.RandomizationFactor.Equal(that1.RandomizationFactor) {
		return false
	}
	if !this.Multiplier.Equal(that1.Multiplier) {
		return false
	}
	if !this.MaxInterval.Equal(that1.MaxInterval) {
		return false
	}
	if !this.MaxElapsedTime.Equal(that1.MaxElapsedTime) {
		return false
	}
	if !this.MaxRetries.Equal(that1.MaxRetries) {
		return false
	}
	return true
}
func (this *InitRequest_TelemetryOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitRequest_TelemetryOptions)
	if !ok {
		that2, ok := that.(InitRequest_TelemetryOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OtelCollectorUrl != that1.OtelCollectorUrl {
		return false
	}
	if this.TracingFilter != that1.TracingFilter {
		return false
	}
	if this.LogForwardingLevel != that1.LogForwardingLevel {
		return false
	}
	if this.PrometheusExportBindAddress != that1.PrometheusExportBindAddress {
		return false
	}
	return true
}
func (this *InitResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitResponse)
	if !ok {
		that2, ok := that.(InitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *InitResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitResponse_Error)
	if !ok {
		that2, ok := that.(InitResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *RegisterWorkerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterWorkerRequest)
	if !ok {
		that2, ok := that.(RegisterWorkerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if !this.MaxCachedWorkflows.Equal(that1.MaxCachedWorkflows) {
		return false
	}
	if !this.MaxOutstandingWorkflowTasks.Equal(that1.MaxOutstandingWorkflowTasks) {
		return false
	}
	if !this.MaxOutstandingActivities.Equal(that1.MaxOutstandingActivities) {
		return false
	}
	if !this.MaxOutstandingLocalActivities.Equal(that1.MaxOutstandingLocalActivities) {
		return false
	}
	if !this.MaxConcurrentWftPolls.Equal(that1.MaxConcurrentWftPolls) {
		return false
	}
	if !this.NonstickyToStickyPollRatio.Equal(that1.NonstickyToStickyPollRatio) {
		return false
	}
	if !this.MaxConcurrentAtPolls.Equal(that1.MaxConcurrentAtPolls) {
		return false
	}
	if this.NoRemoteActivities != that1.NoRemoteActivities {
		return false
	}
	if !this.StickyQueueScheduleToStartTimeout.Equal(that1.StickyQueueScheduleToStartTimeout) {
		return false
	}
	if !this.MaxHeartbeatThrottleInterval.Equal(that1.MaxHeartbeatThrottleInterval) {
		return false
	}
	if !this.DefaultHeartbeatThrottleInterval.Equal(that1.DefaultHeartbeatThrottleInterval) {
		return false
	}
	return true
}
func (this *RegisterWorkerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterWorkerResponse)
	if !ok {
		that2, ok := that.(RegisterWorkerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *RegisterWorkerResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterWorkerResponse_Error)
	if !ok {
		that2, ok := that.(RegisterWorkerResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.WorkerAlreadyRegistered != that1.WorkerAlreadyRegistered {
		return false
	}
	return true
}
func (this *PollWorkflowActivationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowActivationRequest)
	if !ok {
		that2, ok := that.(PollWorkflowActivationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	return true
}
func (this *PollWorkflowActivationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowActivationResponse)
	if !ok {
		that2, ok := that.(PollWorkflowActivationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *PollWorkflowActivationResponse_Activation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowActivationResponse_Activation)
	if !ok {
		that2, ok := that.(PollWorkflowActivationResponse_Activation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Activation.Equal(that1.Activation) {
		return false
	}
	return true
}
func (this *PollWorkflowActivationResponse_Error_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowActivationResponse_Error_)
	if !ok {
		that2, ok := that.(PollWorkflowActivationResponse_Error_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *PollWorkflowActivationResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowActivationResponse_Error)
	if !ok {
		that2, ok := that.(PollWorkflowActivationResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *PollActivityTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskRequest)
	if !ok {
		that2, ok := that.(PollActivityTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	return true
}
func (this *PollActivityTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskResponse)
	if !ok {
		that2, ok := that.(PollActivityTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *PollActivityTaskResponse_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskResponse_Task)
	if !ok {
		that2, ok := that.(PollActivityTaskResponse_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *PollActivityTaskResponse_Error_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskResponse_Error_)
	if !ok {
		that2, ok := that.(PollActivityTaskResponse_Error_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *PollActivityTaskResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskResponse_Error)
	if !ok {
		that2, ok := that.(PollActivityTaskResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *CompleteWorkflowActivationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowActivationRequest)
	if !ok {
		that2, ok := that.(CompleteWorkflowActivationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Completion.Equal(that1.Completion) {
		return false
	}
	return true
}
func (this *CompleteWorkflowActivationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowActivationResponse)
	if !ok {
		that2, ok := that.(CompleteWorkflowActivationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *CompleteWorkflowActivationResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteWorkflowActivationResponse_Error)
	if !ok {
		that2, ok := that.(CompleteWorkflowActivationResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *CompleteActivityTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteActivityTaskRequest)
	if !ok {
		that2, ok := that.(CompleteActivityTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Completion.Equal(that1.Completion) {
		return false
	}
	return true
}
func (this *CompleteActivityTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteActivityTaskResponse)
	if !ok {
		that2, ok := that.(CompleteActivityTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *CompleteActivityTaskResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompleteActivityTaskResponse_Error)
	if !ok {
		that2, ok := that.(CompleteActivityTaskResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *RecordActivityHeartbeatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityHeartbeatRequest)
	if !ok {
		that2, ok := that.(RecordActivityHeartbeatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Heartbeat.Equal(that1.Heartbeat) {
		return false
	}
	return true
}
func (this *RecordActivityHeartbeatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordActivityHeartbeatResponse)
	if !ok {
		that2, ok := that.(RecordActivityHeartbeatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestWorkflowEvictionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestWorkflowEvictionRequest)
	if !ok {
		that2, ok := that.(RequestWorkflowEvictionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	return true
}
func (this *RequestWorkflowEvictionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestWorkflowEvictionResponse)
	if !ok {
		that2, ok := that.(RequestWorkflowEvictionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShutdownRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShutdownRequest)
	if !ok {
		that2, ok := that.(ShutdownRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShutdownResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShutdownResponse)
	if !ok {
		that2, ok := that.(ShutdownResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ShutdownWorkerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShutdownWorkerRequest)
	if !ok {
		that2, ok := that.(ShutdownWorkerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	return true
}
func (this *ShutdownWorkerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShutdownWorkerResponse)
	if !ok {
		that2, ok := that.(ShutdownWorkerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FetchBufferedLogsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchBufferedLogsRequest)
	if !ok {
		that2, ok := that.(FetchBufferedLogsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FetchBufferedLogsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchBufferedLogsResponse)
	if !ok {
		that2, ok := that.(FetchBufferedLogsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *FetchBufferedLogsResponse_LogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchBufferedLogsResponse_LogEntry)
	if !ok {
		that2, ok := that.(FetchBufferedLogsResponse_LogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *InitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_bridge.InitRequest{")
	if this.GatewayOptions != nil {
		s = append(s, "GatewayOptions: "+fmt.Sprintf("%#v", this.GatewayOptions)+",\n")
	}
	if this.TelemetryOptions != nil {
		s = append(s, "TelemetryOptions: "+fmt.Sprintf("%#v", this.TelemetryOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitRequest_GatewayOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&coresdk_bridge.InitRequest_GatewayOptions{")
	s = append(s, "TargetUrl: "+fmt.Sprintf("%#v", this.TargetUrl)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ClientName: "+fmt.Sprintf("%#v", this.ClientName)+",\n")
	s = append(s, "ClientVersion: "+fmt.Sprintf("%#v", this.ClientVersion)+",\n")
	keysForStaticHeaders := make([]string, 0, len(this.StaticHeaders))
	for k, _ := range this.StaticHeaders {
		keysForStaticHeaders = append(keysForStaticHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStaticHeaders)
	mapStringForStaticHeaders := "map[string]string{"
	for _, k := range keysForStaticHeaders {
		mapStringForStaticHeaders += fmt.Sprintf("%#v: %#v,", k, this.StaticHeaders[k])
	}
	mapStringForStaticHeaders += "}"
	if this.StaticHeaders != nil {
		s = append(s, "StaticHeaders: "+mapStringForStaticHeaders+",\n")
	}
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "WorkerBinaryId: "+fmt.Sprintf("%#v", this.WorkerBinaryId)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.RetryConfig != nil {
		s = append(s, "RetryConfig: "+fmt.Sprintf("%#v", this.RetryConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitRequest_TlsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_bridge.InitRequest_TlsConfig{")
	s = append(s, "ServerRootCaCert: "+fmt.Sprintf("%#v", this.ServerRootCaCert)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "ClientCert: "+fmt.Sprintf("%#v", this.ClientCert)+",\n")
	s = append(s, "ClientPrivateKey: "+fmt.Sprintf("%#v", this.ClientPrivateKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitRequest_RetryConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&coresdk_bridge.InitRequest_RetryConfig{")
	if this.InitialInterval != nil {
		s = append(s, "InitialInterval: "+fmt.Sprintf("%#v", this.InitialInterval)+",\n")
	}
	if this.RandomizationFactor != nil {
		s = append(s, "RandomizationFactor: "+fmt.Sprintf("%#v", this.RandomizationFactor)+",\n")
	}
	if this.Multiplier != nil {
		s = append(s, "Multiplier: "+fmt.Sprintf("%#v", this.Multiplier)+",\n")
	}
	if this.MaxInterval != nil {
		s = append(s, "MaxInterval: "+fmt.Sprintf("%#v", this.MaxInterval)+",\n")
	}
	if this.MaxElapsedTime != nil {
		s = append(s, "MaxElapsedTime: "+fmt.Sprintf("%#v", this.MaxElapsedTime)+",\n")
	}
	if this.MaxRetries != nil {
		s = append(s, "MaxRetries: "+fmt.Sprintf("%#v", this.MaxRetries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitRequest_TelemetryOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&coresdk_bridge.InitRequest_TelemetryOptions{")
	s = append(s, "OtelCollectorUrl: "+fmt.Sprintf("%#v", this.OtelCollectorUrl)+",\n")
	s = append(s, "TracingFilter: "+fmt.Sprintf("%#v", this.TracingFilter)+",\n")
	s = append(s, "LogForwardingLevel: "+fmt.Sprintf("%#v", this.LogForwardingLevel)+",\n")
	s = append(s, "PrometheusExportBindAddress: "+fmt.Sprintf("%#v", this.PrometheusExportBindAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.InitResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.InitResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterWorkerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&coresdk_bridge.RegisterWorkerRequest{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.MaxCachedWorkflows != nil {
		s = append(s, "MaxCachedWorkflows: "+fmt.Sprintf("%#v", this.MaxCachedWorkflows)+",\n")
	}
	if this.MaxOutstandingWorkflowTasks != nil {
		s = append(s, "MaxOutstandingWorkflowTasks: "+fmt.Sprintf("%#v", this.MaxOutstandingWorkflowTasks)+",\n")
	}
	if this.MaxOutstandingActivities != nil {
		s = append(s, "MaxOutstandingActivities: "+fmt.Sprintf("%#v", this.MaxOutstandingActivities)+",\n")
	}
	if this.MaxOutstandingLocalActivities != nil {
		s = append(s, "MaxOutstandingLocalActivities: "+fmt.Sprintf("%#v", this.MaxOutstandingLocalActivities)+",\n")
	}
	if this.MaxConcurrentWftPolls != nil {
		s = append(s, "MaxConcurrentWftPolls: "+fmt.Sprintf("%#v", this.MaxConcurrentWftPolls)+",\n")
	}
	if this.NonstickyToStickyPollRatio != nil {
		s = append(s, "NonstickyToStickyPollRatio: "+fmt.Sprintf("%#v", this.NonstickyToStickyPollRatio)+",\n")
	}
	if this.MaxConcurrentAtPolls != nil {
		s = append(s, "MaxConcurrentAtPolls: "+fmt.Sprintf("%#v", this.MaxConcurrentAtPolls)+",\n")
	}
	s = append(s, "NoRemoteActivities: "+fmt.Sprintf("%#v", this.NoRemoteActivities)+",\n")
	if this.StickyQueueScheduleToStartTimeout != nil {
		s = append(s, "StickyQueueScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.StickyQueueScheduleToStartTimeout)+",\n")
	}
	if this.MaxHeartbeatThrottleInterval != nil {
		s = append(s, "MaxHeartbeatThrottleInterval: "+fmt.Sprintf("%#v", this.MaxHeartbeatThrottleInterval)+",\n")
	}
	if this.DefaultHeartbeatThrottleInterval != nil {
		s = append(s, "DefaultHeartbeatThrottleInterval: "+fmt.Sprintf("%#v", this.DefaultHeartbeatThrottleInterval)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterWorkerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.RegisterWorkerResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterWorkerResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_bridge.RegisterWorkerResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "WorkerAlreadyRegistered: "+fmt.Sprintf("%#v", this.WorkerAlreadyRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollWorkflowActivationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.PollWorkflowActivationRequest{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollWorkflowActivationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_bridge.PollWorkflowActivationResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollWorkflowActivationResponse_Activation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_bridge.PollWorkflowActivationResponse_Activation{` +
		`Activation:` + fmt.Sprintf("%#v", this.Activation) + `}`}, ", ")
	return s
}
func (this *PollWorkflowActivationResponse_Error_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_bridge.PollWorkflowActivationResponse_Error_{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *PollWorkflowActivationResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.PollWorkflowActivationResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollActivityTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.PollActivityTaskRequest{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollActivityTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_bridge.PollActivityTaskResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollActivityTaskResponse_Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_bridge.PollActivityTaskResponse_Task{` +
		`Task:` + fmt.Sprintf("%#v", this.Task) + `}`}, ", ")
	return s
}
func (this *PollActivityTaskResponse_Error_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&coresdk_bridge.PollActivityTaskResponse_Error_{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *PollActivityTaskResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.PollActivityTaskResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowActivationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteWorkflowActivationRequest{")
	if this.Completion != nil {
		s = append(s, "Completion: "+fmt.Sprintf("%#v", this.Completion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowActivationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteWorkflowActivationResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteWorkflowActivationResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteWorkflowActivationResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteActivityTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteActivityTaskRequest{")
	if this.Completion != nil {
		s = append(s, "Completion: "+fmt.Sprintf("%#v", this.Completion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteActivityTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteActivityTaskResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteActivityTaskResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.CompleteActivityTaskResponse_Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityHeartbeatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.RecordActivityHeartbeatRequest{")
	if this.Heartbeat != nil {
		s = append(s, "Heartbeat: "+fmt.Sprintf("%#v", this.Heartbeat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordActivityHeartbeatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.RecordActivityHeartbeatResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestWorkflowEvictionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coresdk_bridge.RequestWorkflowEvictionRequest{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestWorkflowEvictionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.RequestWorkflowEvictionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShutdownRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.ShutdownRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShutdownResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.ShutdownResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShutdownWorkerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.ShutdownWorkerRequest{")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShutdownWorkerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.ShutdownWorkerResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchBufferedLogsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coresdk_bridge.FetchBufferedLogsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchBufferedLogsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coresdk_bridge.FetchBufferedLogsResponse{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchBufferedLogsResponse_LogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&coresdk_bridge.FetchBufferedLogsResponse_LogEntry{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBridge(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TelemetryOptions != nil {
		{
			size, err := m.TelemetryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GatewayOptions != nil {
		{
			size, err := m.GatewayOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitRequest_GatewayOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRequest_GatewayOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitRequest_GatewayOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryConfig != nil {
		{
			size, err := m.RetryConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.WorkerBinaryId) > 0 {
		i -= len(m.WorkerBinaryId)
		copy(dAtA[i:], m.WorkerBinaryId)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.WorkerBinaryId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StaticHeaders) > 0 {
		for k := range m.StaticHeaders {
			v := m.StaticHeaders[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBridge(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBridge(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBridge(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientName) > 0 {
		i -= len(m.ClientName)
		copy(dAtA[i:], m.ClientName)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.ClientName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetUrl) > 0 {
		i -= len(m.TargetUrl)
		copy(dAtA[i:], m.TargetUrl)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TargetUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitRequest_TlsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRequest_TlsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitRequest_TlsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientPrivateKey) > 0 {
		i -= len(m.ClientPrivateKey)
		copy(dAtA[i:], m.ClientPrivateKey)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.ClientPrivateKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientCert) > 0 {
		i -= len(m.ClientCert)
		copy(dAtA[i:], m.ClientCert)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.ClientCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerRootCaCert) > 0 {
		i -= len(m.ServerRootCaCert)
		copy(dAtA[i:], m.ServerRootCaCert)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.ServerRootCaCert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitRequest_RetryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRequest_RetryConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitRequest_RetryConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRetries != nil {
		{
			size, err := m.MaxRetries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxElapsedTime != nil {
		{
			size, err := m.MaxElapsedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxInterval != nil {
		{
			size, err := m.MaxInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Multiplier != nil {
		{
			size, err := m.Multiplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomizationFactor != nil {
		{
			size, err := m.RandomizationFactor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InitialInterval != nil {
		{
			size, err := m.InitialInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitRequest_TelemetryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitRequest_TelemetryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitRequest_TelemetryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrometheusExportBindAddress) > 0 {
		i -= len(m.PrometheusExportBindAddress)
		copy(dAtA[i:], m.PrometheusExportBindAddress)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.PrometheusExportBindAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogForwardingLevel != 0 {
		i = encodeVarintBridge(dAtA, i, uint64(m.LogForwardingLevel))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TracingFilter) > 0 {
		i -= len(m.TracingFilter)
		copy(dAtA[i:], m.TracingFilter)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TracingFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OtelCollectorUrl) > 0 {
		i -= len(m.OtelCollectorUrl)
		copy(dAtA[i:], m.OtelCollectorUrl)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.OtelCollectorUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultHeartbeatThrottleInterval != nil {
		{
			size, err := m.DefaultHeartbeatThrottleInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MaxHeartbeatThrottleInterval != nil {
		{
			size, err := m.MaxHeartbeatThrottleInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StickyQueueScheduleToStartTimeout != nil {
		{
			size, err := m.StickyQueueScheduleToStartTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NoRemoteActivities {
		i--
		if m.NoRemoteActivities {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.MaxConcurrentAtPolls != nil {
		{
			size, err := m.MaxConcurrentAtPolls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NonstickyToStickyPollRatio != nil {
		{
			size, err := m.NonstickyToStickyPollRatio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxConcurrentWftPolls != nil {
		{
			size, err := m.MaxConcurrentWftPolls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxOutstandingLocalActivities != nil {
		{
			size, err := m.MaxOutstandingLocalActivities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxOutstandingActivities != nil {
		{
			size, err := m.MaxOutstandingActivities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxOutstandingWorkflowTasks != nil {
		{
			size, err := m.MaxOutstandingWorkflowTasks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxCachedWorkflows != nil {
		{
			size, err := m.MaxCachedWorkflows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterWorkerResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterWorkerResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterWorkerResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerAlreadyRegistered {
		i--
		if m.WorkerAlreadyRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollWorkflowActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollWorkflowActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowActivationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollWorkflowActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollWorkflowActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowActivationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollWorkflowActivationResponse_Activation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowActivationResponse_Activation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Activation != nil {
		{
			size, err := m.Activation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PollWorkflowActivationResponse_Error_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowActivationResponse_Error_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PollWorkflowActivationResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollWorkflowActivationResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowActivationResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollActivityTaskResponse_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskResponse_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PollActivityTaskResponse_Error_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskResponse_Error_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PollActivityTaskResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollActivityTaskResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowActivationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completion != nil {
		{
			size, err := m.Completion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowActivationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteWorkflowActivationResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteWorkflowActivationResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteWorkflowActivationResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completion != nil {
		{
			size, err := m.Completion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteActivityTaskResponse_Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteActivityTaskResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteActivityTaskResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityHeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Heartbeat != nil {
		{
			size, err := m.Heartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordActivityHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordActivityHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordActivityHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestWorkflowEvictionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestWorkflowEvictionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestWorkflowEvictionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestWorkflowEvictionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestWorkflowEvictionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestWorkflowEvictionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShutdownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShutdownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ShutdownWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShutdownWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FetchBufferedLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchBufferedLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchBufferedLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FetchBufferedLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchBufferedLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchBufferedLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FetchBufferedLogsResponse_LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchBufferedLogsResponse_LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchBufferedLogsResponse_LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintBridge(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBridge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GatewayOptions != nil {
		l = m.GatewayOptions.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.TelemetryOptions != nil {
		l = m.TelemetryOptions.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitRequest_GatewayOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetUrl)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.ClientName)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if len(m.StaticHeaders) > 0 {
		for k, v := range m.StaticHeaders {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBridge(uint64(len(k))) + 1 + len(v) + sovBridge(uint64(len(v)))
			n += mapEntrySize + 1 + sovBridge(uint64(mapEntrySize))
		}
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.WorkerBinaryId)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.RetryConfig != nil {
		l = m.RetryConfig.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitRequest_TlsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerRootCaCert)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.ClientCert)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.ClientPrivateKey)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitRequest_RetryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitialInterval != nil {
		l = m.InitialInterval.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.RandomizationFactor != nil {
		l = m.RandomizationFactor.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Multiplier != nil {
		l = m.Multiplier.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxInterval != nil {
		l = m.MaxInterval.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxElapsedTime != nil {
		l = m.MaxElapsedTime.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxRetries != nil {
		l = m.MaxRetries.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitRequest_TelemetryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OtelCollectorUrl)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.TracingFilter)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.LogForwardingLevel != 0 {
		n += 1 + sovBridge(uint64(m.LogForwardingLevel))
	}
	l = len(m.PrometheusExportBindAddress)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *InitResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RegisterWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxCachedWorkflows != nil {
		l = m.MaxCachedWorkflows.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxOutstandingWorkflowTasks != nil {
		l = m.MaxOutstandingWorkflowTasks.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxOutstandingActivities != nil {
		l = m.MaxOutstandingActivities.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxOutstandingLocalActivities != nil {
		l = m.MaxOutstandingLocalActivities.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxConcurrentWftPolls != nil {
		l = m.MaxConcurrentWftPolls.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.NonstickyToStickyPollRatio != nil {
		l = m.NonstickyToStickyPollRatio.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxConcurrentAtPolls != nil {
		l = m.MaxConcurrentAtPolls.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.NoRemoteActivities {
		n += 2
	}
	if m.StickyQueueScheduleToStartTimeout != nil {
		l = m.StickyQueueScheduleToStartTimeout.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.MaxHeartbeatThrottleInterval != nil {
		l = m.MaxHeartbeatThrottleInterval.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.DefaultHeartbeatThrottleInterval != nil {
		l = m.DefaultHeartbeatThrottleInterval.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RegisterWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RegisterWorkerResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.WorkerAlreadyRegistered {
		n += 2
	}
	return n
}

func (m *PollWorkflowActivationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *PollWorkflowActivationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *PollWorkflowActivationResponse_Activation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Activation != nil {
		l = m.Activation.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}
func (m *PollWorkflowActivationResponse_Error_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}
func (m *PollWorkflowActivationResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *PollActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *PollActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *PollActivityTaskResponse_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}
func (m *PollActivityTaskResponse_Error_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}
func (m *PollActivityTaskResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteWorkflowActivationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completion != nil {
		l = m.Completion.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteWorkflowActivationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteWorkflowActivationResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completion != nil {
		l = m.Completion.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *CompleteActivityTaskResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RecordActivityHeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RecordActivityHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestWorkflowEvictionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *RequestWorkflowEvictionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShutdownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShutdownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ShutdownWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *ShutdownWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FetchBufferedLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FetchBufferedLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	return n
}

func (m *FetchBufferedLogsResponse_LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovBridge(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovBridge(uint64(m.Level))
	}
	return n
}

func sovBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridge(x uint64) (n int) {
	return sovBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitRequest{`,
		`GatewayOptions:` + strings.Replace(fmt.Sprintf("%v", this.GatewayOptions), "InitRequest_GatewayOptions", "InitRequest_GatewayOptions", 1) + `,`,
		`TelemetryOptions:` + strings.Replace(fmt.Sprintf("%v", this.TelemetryOptions), "InitRequest_TelemetryOptions", "InitRequest_TelemetryOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitRequest_GatewayOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForStaticHeaders := make([]string, 0, len(this.StaticHeaders))
	for k, _ := range this.StaticHeaders {
		keysForStaticHeaders = append(keysForStaticHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStaticHeaders)
	mapStringForStaticHeaders := "map[string]string{"
	for _, k := range keysForStaticHeaders {
		mapStringForStaticHeaders += fmt.Sprintf("%v: %v,", k, this.StaticHeaders[k])
	}
	mapStringForStaticHeaders += "}"
	s := strings.Join([]string{`&InitRequest_GatewayOptions{`,
		`TargetUrl:` + fmt.Sprintf("%v", this.TargetUrl) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ClientName:` + fmt.Sprintf("%v", this.ClientName) + `,`,
		`ClientVersion:` + fmt.Sprintf("%v", this.ClientVersion) + `,`,
		`StaticHeaders:` + mapStringForStaticHeaders + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`WorkerBinaryId:` + fmt.Sprintf("%v", this.WorkerBinaryId) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "InitRequest_TlsConfig", "InitRequest_TlsConfig", 1) + `,`,
		`RetryConfig:` + strings.Replace(fmt.Sprintf("%v", this.RetryConfig), "InitRequest_RetryConfig", "InitRequest_RetryConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitRequest_TlsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitRequest_TlsConfig{`,
		`ServerRootCaCert:` + fmt.Sprintf("%v", this.ServerRootCaCert) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ClientCert:` + fmt.Sprintf("%v", this.ClientCert) + `,`,
		`ClientPrivateKey:` + fmt.Sprintf("%v", this.ClientPrivateKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitRequest_RetryConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitRequest_RetryConfig{`,
		`InitialInterval:` + strings.Replace(fmt.Sprintf("%v", this.InitialInterval), "Duration", "types.Duration", 1) + `,`,
		`RandomizationFactor:` + strings.Replace(fmt.Sprintf("%v", this.RandomizationFactor), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`Multiplier:` + strings.Replace(fmt.Sprintf("%v", this.Multiplier), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`MaxInterval:` + strings.Replace(fmt.Sprintf("%v", this.MaxInterval), "Duration", "types.Duration", 1) + `,`,
		`MaxElapsedTime:` + strings.Replace(fmt.Sprintf("%v", this.MaxElapsedTime), "Duration", "types.Duration", 1) + `,`,
		`MaxRetries:` + strings.Replace(fmt.Sprintf("%v", this.MaxRetries), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitRequest_TelemetryOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitRequest_TelemetryOptions{`,
		`OtelCollectorUrl:` + fmt.Sprintf("%v", this.OtelCollectorUrl) + `,`,
		`TracingFilter:` + fmt.Sprintf("%v", this.TracingFilter) + `,`,
		`LogForwardingLevel:` + fmt.Sprintf("%v", this.LogForwardingLevel) + `,`,
		`PrometheusExportBindAddress:` + fmt.Sprintf("%v", this.PrometheusExportBindAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "InitResponse_Error", "InitResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterWorkerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterWorkerRequest{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`MaxCachedWorkflows:` + strings.Replace(fmt.Sprintf("%v", this.MaxCachedWorkflows), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`MaxOutstandingWorkflowTasks:` + strings.Replace(fmt.Sprintf("%v", this.MaxOutstandingWorkflowTasks), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`MaxOutstandingActivities:` + strings.Replace(fmt.Sprintf("%v", this.MaxOutstandingActivities), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`MaxOutstandingLocalActivities:` + strings.Replace(fmt.Sprintf("%v", this.MaxOutstandingLocalActivities), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`MaxConcurrentWftPolls:` + strings.Replace(fmt.Sprintf("%v", this.MaxConcurrentWftPolls), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`NonstickyToStickyPollRatio:` + strings.Replace(fmt.Sprintf("%v", this.NonstickyToStickyPollRatio), "FloatValue", "types.FloatValue", 1) + `,`,
		`MaxConcurrentAtPolls:` + strings.Replace(fmt.Sprintf("%v", this.MaxConcurrentAtPolls), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`NoRemoteActivities:` + fmt.Sprintf("%v", this.NoRemoteActivities) + `,`,
		`StickyQueueScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StickyQueueScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`MaxHeartbeatThrottleInterval:` + strings.Replace(fmt.Sprintf("%v", this.MaxHeartbeatThrottleInterval), "Duration", "types.Duration", 1) + `,`,
		`DefaultHeartbeatThrottleInterval:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeartbeatThrottleInterval), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterWorkerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterWorkerResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "RegisterWorkerResponse_Error", "RegisterWorkerResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterWorkerResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterWorkerResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`WorkerAlreadyRegistered:` + fmt.Sprintf("%v", this.WorkerAlreadyRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowActivationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowActivationRequest{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowActivationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowActivationResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowActivationResponse_Activation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowActivationResponse_Activation{`,
		`Activation:` + strings.Replace(fmt.Sprintf("%v", this.Activation), "WorkflowActivation", "workflowactivationpb.WorkflowActivation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowActivationResponse_Error_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowActivationResponse_Error_{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "PollWorkflowActivationResponse_Error", "PollWorkflowActivationResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowActivationResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowActivationResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskRequest{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskResponse_Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskResponse_Task{`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "ActivityTask", "activitytaskpb.ActivityTask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskResponse_Error_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskResponse_Error_{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "PollActivityTaskResponse_Error", "PollActivityTaskResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowActivationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowActivationRequest{`,
		`Completion:` + strings.Replace(fmt.Sprintf("%v", this.Completion), "WorkflowActivationCompletion", "workflowcompletionpb.WorkflowActivationCompletion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowActivationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowActivationResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "CompleteWorkflowActivationResponse_Error", "CompleteWorkflowActivationResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteWorkflowActivationResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteWorkflowActivationResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteActivityTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteActivityTaskRequest{`,
		`Completion:` + strings.Replace(fmt.Sprintf("%v", this.Completion), "ActivityTaskCompletion", "corepb.ActivityTaskCompletion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteActivityTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteActivityTaskResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "CompleteActivityTaskResponse_Error", "CompleteActivityTaskResponse_Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteActivityTaskResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteActivityTaskResponse_Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityHeartbeatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityHeartbeatRequest{`,
		`Heartbeat:` + strings.Replace(fmt.Sprintf("%v", this.Heartbeat), "ActivityHeartbeat", "corepb.ActivityHeartbeat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordActivityHeartbeatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordActivityHeartbeatResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RequestWorkflowEvictionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestWorkflowEvictionRequest{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestWorkflowEvictionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestWorkflowEvictionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ShutdownRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShutdownRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ShutdownResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShutdownResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ShutdownWorkerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShutdownWorkerRequest{`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShutdownWorkerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShutdownWorkerResponse{`,
		`}`,
	}, "")
	return s
}
func (this *FetchBufferedLogsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchBufferedLogsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *FetchBufferedLogsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntries := "[]*FetchBufferedLogsResponse_LogEntry{"
	for _, f := range this.Entries {
		repeatedStringForEntries += strings.Replace(fmt.Sprintf("%v", f), "FetchBufferedLogsResponse_LogEntry", "FetchBufferedLogsResponse_LogEntry", 1) + ","
	}
	repeatedStringForEntries += "}"
	s := strings.Join([]string{`&FetchBufferedLogsResponse{`,
		`Entries:` + repeatedStringForEntries + `,`,
		`}`,
	}, "")
	return s
}
func (this *FetchBufferedLogsResponse_LogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchBufferedLogsResponse_LogEntry{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBridge(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayOptions == nil {
				m.GatewayOptions = &InitRequest_GatewayOptions{}
			}
			if err := m.GatewayOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TelemetryOptions == nil {
				m.TelemetryOptions = &InitRequest_TelemetryOptions{}
			}
			if err := m.TelemetryOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRequest_GatewayOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaticHeaders == nil {
				m.StaticHeaders = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBridge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBridge
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBridge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBridge
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBridge
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBridge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBridge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StaticHeaders[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerBinaryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerBinaryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &InitRequest_TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryConfig == nil {
				m.RetryConfig = &InitRequest_RetryConfig{}
			}
			if err := m.RetryConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRequest_TlsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerRootCaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerRootCaCert = append(m.ServerRootCaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerRootCaCert == nil {
				m.ServerRootCaCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCert = append(m.ClientCert[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientCert == nil {
				m.ClientCert = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPrivateKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPrivateKey = append(m.ClientPrivateKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientPrivateKey == nil {
				m.ClientPrivateKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRequest_RetryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialInterval == nil {
				m.InitialInterval = &types.Duration{}
			}
			if err := m.InitialInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomizationFactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RandomizationFactor == nil {
				m.RandomizationFactor = &types.DoubleValue{}
			}
			if err := m.RandomizationFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Multiplier == nil {
				m.Multiplier = &types.DoubleValue{}
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxInterval == nil {
				m.MaxInterval = &types.Duration{}
			}
			if err := m.MaxInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxElapsedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxElapsedTime == nil {
				m.MaxElapsedTime = &types.Duration{}
			}
			if err := m.MaxElapsedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRetries == nil {
				m.MaxRetries = &types.UInt32Value{}
			}
			if err := m.MaxRetries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitRequest_TelemetryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtelCollectorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtelCollectorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracingFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracingFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogForwardingLevel", wireType)
			}
			m.LogForwardingLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogForwardingLevel |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrometheusExportBindAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrometheusExportBindAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &InitResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCachedWorkflows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxCachedWorkflows == nil {
				m.MaxCachedWorkflows = &types.UInt32Value{}
			}
			if err := m.MaxCachedWorkflows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutstandingWorkflowTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxOutstandingWorkflowTasks == nil {
				m.MaxOutstandingWorkflowTasks = &types.UInt32Value{}
			}
			if err := m.MaxOutstandingWorkflowTasks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutstandingActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxOutstandingActivities == nil {
				m.MaxOutstandingActivities = &types.UInt32Value{}
			}
			if err := m.MaxOutstandingActivities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutstandingLocalActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxOutstandingLocalActivities == nil {
				m.MaxOutstandingLocalActivities = &types.UInt32Value{}
			}
			if err := m.MaxOutstandingLocalActivities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrentWftPolls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxConcurrentWftPolls == nil {
				m.MaxConcurrentWftPolls = &types.UInt32Value{}
			}
			if err := m.MaxConcurrentWftPolls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonstickyToStickyPollRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonstickyToStickyPollRatio == nil {
				m.NonstickyToStickyPollRatio = &types.FloatValue{}
			}
			if err := m.NonstickyToStickyPollRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrentAtPolls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxConcurrentAtPolls == nil {
				m.MaxConcurrentAtPolls = &types.UInt32Value{}
			}
			if err := m.MaxConcurrentAtPolls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRemoteActivities", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoRemoteActivities = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyQueueScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickyQueueScheduleToStartTimeout == nil {
				m.StickyQueueScheduleToStartTimeout = &types.Duration{}
			}
			if err := m.StickyQueueScheduleToStartTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHeartbeatThrottleInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxHeartbeatThrottleInterval == nil {
				m.MaxHeartbeatThrottleInterval = &types.Duration{}
			}
			if err := m.MaxHeartbeatThrottleInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeartbeatThrottleInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultHeartbeatThrottleInterval == nil {
				m.DefaultHeartbeatThrottleInterval = &types.Duration{}
			}
			if err := m.DefaultHeartbeatThrottleInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &RegisterWorkerResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterWorkerResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerAlreadyRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerAlreadyRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollWorkflowActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollWorkflowActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollWorkflowActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollWorkflowActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollWorkflowActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollWorkflowActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &workflowactivationpb.WorkflowActivation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PollWorkflowActivationResponse_Activation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PollWorkflowActivationResponse_Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PollWorkflowActivationResponse_Error_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollWorkflowActivationResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &activitytaskpb.ActivityTask{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PollActivityTaskResponse_Task{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PollActivityTaskResponse_Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &PollActivityTaskResponse_Error_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollActivityTaskResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Completion == nil {
				m.Completion = &workflowcompletionpb.WorkflowActivationCompletion{}
			}
			if err := m.Completion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteWorkflowActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteWorkflowActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &CompleteWorkflowActivationResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteWorkflowActivationResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Completion == nil {
				m.Completion = &corepb.ActivityTaskCompletion{}
			}
			if err := m.Completion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &CompleteActivityTaskResponse_Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteActivityTaskResponse_Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Heartbeat == nil {
				m.Heartbeat = &corepb.ActivityHeartbeat{}
			}
			if err := m.Heartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordActivityHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordActivityHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordActivityHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestWorkflowEvictionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestWorkflowEvictionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestWorkflowEvictionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestWorkflowEvictionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestWorkflowEvictionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestWorkflowEvictionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchBufferedLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchBufferedLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchBufferedLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchBufferedLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchBufferedLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchBufferedLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &FetchBufferedLogsResponse_LogEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchBufferedLogsResponse_LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridge = fmt.Errorf("proto: unexpected end of group")
)
